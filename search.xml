<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[543.Diameter of Binary Tree]]></title>
      <url>/2017/08/05/543.Diameter%20of%20Binary%20Tree/</url>
      <content type="html"><![CDATA[<p>#题目描述<br>    Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.<br>    给定一个二叉树，计算任意两个节点之间最长路径的长度<br>        1<br>       / \<br>      2   3<br>     / \<br>    4   5<br>    Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].<br>这是一个简单的动态规划的问题，通过深度遍历求最低节点所构成子树的最长路径，然后依次向上，保留路径的最大值，最终结果就是给定二叉树的最长路径。<br>下面给出Java实现代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">public class Solution &#123;</div><div class="line">    int maxlen = 0;</div><div class="line">    public int maxdep(TreeNode root) &#123;</div><div class="line">        if(root == null)</div><div class="line">            return 0;</div><div class="line">        int left = maxdep(root.left);</div><div class="line">        int right = maxdep(root.right);</div><div class="line">        maxlen = Math.max(maxlen,left+right);</div><div class="line">        return Math.max(left,right)+1;</div><div class="line">    &#125;</div><div class="line">    public int diameterOfBinaryTree(TreeNode root) &#123;</div><div class="line">        maxdep(root);</div><div class="line">        return maxlen;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Runtime: 9 ms</p>
]]></content>
      
        <categories>
            
            <category> leetcode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[友情链接]]></title>
      <url>/2017/08/04/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<p>#下面是一些网站的传送门<br><a id="more"></a><br>csdn: <a href="http://blog.csdn.net/baidu_21483933" target="_blank" rel="external">http://blog.csdn.net/baidu_21483933</a><br>segmentfault: <a href="https://segmentfault.com/blog/maocg_web" target="_blank" rel="external">https://segmentfault.com/blog/maocg_web</a><br>简书: <a href="http://www.jianshu.com/users/eb37ef89c746/latest_articles" target="_blank" rel="external">http://www.jianshu.com/users/eb37ef89c746/latest_articles</a><br>最右: <a href="https://zuiyou.ixiaochuan.cn/home" target="_blank" rel="external">https://zuiyou.ixiaochuan.cn/home</a></p>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[371.Sum of Two Integers]]></title>
      <url>/2017/08/03/371.Sum%20of%20Two%20Integers/</url>
      <content type="html"><![CDATA[<p>#题目描述<br>Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.<br>不使用加减号计算两个整数的和，找到了两种方法。<br><a id="more"></a> </p>
<p>##方法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public int getSum(int a, int b) &#123;</div><div class="line">        if(0 == b)  </div><div class="line">            return a;  </div><div class="line">        int cxor = a^b;  </div><div class="line">        int cand = a&amp;b;  </div><div class="line">        return getSum(cxor, cand&lt;&lt;1);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>1.在二进制下,不考虑进位将a,b相加,即a^b.<br>2.只考虑进位,即a&amp;b.<br>3.将a&amp;b向前进一位.<br>4.此时a+b就可以转化为另外两个数的和,直至b为0.</p>
<p>##方法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int getSum(int a, int b) &#123;</div><div class="line">        char *c = (char *)a;  </div><div class="line">        return (long) &amp;c[b];  </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>1.首先将a转换为地址类型,指针c指向该地址.<br>2.c[b]就是相当于平时数组中的取下标为b的元素的值,就是说c[b]=c+sizeof(char*)b.<br>3.因为c是指针，所以c[b]指向的是地址内的值,用&amp;来将该地址对应的值的地址取出来.</p>
]]></content>
      
        <categories>
            
            <category> leetcode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
