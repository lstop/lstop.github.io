<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[搭建个人博客]]></title>
    <url>%2F2017%2F09%2F21%2F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[准备工具1.GitGit是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。官网下载地址https://git-scm.com/downloads2.Node.jsNode.js是一种javascript的运行环境，能够使得javascript脱离浏览器运行。官网下载地址https://nodejs.org/en/3.Githubgithub是一个基于git的web 协作社区，它有多种机制让大家协同的和你一起的对项目进行贡献。github全平台、全设备支持，你可以在任何终端上，随时随地的共享你的代码、评论或着其他有意义的信息。世界上最大的开源软件社区。Github官网https://github.com/ 安装Git下载好Git之后一路next安装即可,安装完成后打开cmd窗口输入下面命令12345678910git --version``` ![1](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog1.png) 如图所示若出现版本号则安装成功安装Node.js------Node安装更加简单，还是一路”Next”,最后等待安装完成即可.然后输入 node -vnpm -v 1234567891011121314151617181920212223242526 ![2](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog2.png) 安装成功则结果如图所示 Github仓库仓库准备------首先进入Github官网注册Github账号 ![3](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog3.png) ![4](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog4.png) 注册成功后,点击New repository新建一个仓库,在Repository name一栏输入yourname.github.io这就是你的博客的域名.注意yourname必须与你注册的用户名一致,比如我的用户名为lstop,对应的仓库名为lstop.github.io ![5](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog5.png) 然后进入仓库,会看到右上角有个Settings,点击打开这个库的setting页面，向下拖动，直到看见GitHub Pages,点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面.配置完成后,yourname.github.io这个网址就可以正常访问了. ![61](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog61.jpg) ![62](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog62.jpg)安装Hexo------hexo是基于node.js的静态博客，官网也是搭建在GitHub上的.首先在电脑上某个位置新建一个Blog的文件夹,然后鼠标右键会有一个Git Bash Here,点击打开,如下图所示 ![71](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog71.png)![72](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog72.png) 然后在命令行输入 npm install hexo-cli -gnpm install hexo –save 123等待Hexo安装完成输入 hexo -v 1234567查看是否安装成功![8](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog8.png)初始化------执行命令 hexo initnpm install 123生成静态页面------ hexo g 123本地启动------ hexo s 123456789在看到下图提示之后,打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了![9](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog9.png)大概就是这个样子![10](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog10.png)部署到Gitub------首先要设置Git的username和email git config –global user.name “yourname”git config –global user.email “youremail” 1234然后这里需要配置SSH Keys,如果不配置那么以后每次提交都要手动输入账号密码配置完成后打开Blog目录下的_config.yml文件,打开找到Deployment,将其替换为下面一段话 deploy: type: git repository: git@github.com:yourname/yourname.github.io.git,master branch: master 12然后再执行 npm install hexo-deployer-git –savehexo d 123456就基本上完成部署了,然后在浏览器输入https://yourname.github.io/就可以访问了写博客---在Blog\source\_posts目录下新建.md文件,写好后执行命令 hexo d -g ``` 就可以发布到博客上 配置主题现在Github上有好多主题可以直接使用,上面有很详细的配置教程链接https://hexo.io/themes/ 原文地址 转载请注明出处]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat配置]]></title>
    <url>%2F2017%2F09%2F08%2FTomcat%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。 配置java环境安装jdk配置环境变量 下载Tomcat在tomcat官网就可以下载相应版本的tomcatwindow版本下载地址:tomcat7.0: 32位 64位tomcat8.0: 32位 64位tomcat8.5: 32位 64位tomcat9.0: 32位 64位 在eclipse上配置Tomcat1.选择菜单栏中的window——preferences2.选择左侧的 server——runtime environment——在弹出的窗口中选择add3.选择你的Tomcat的版本4.选择tomcat的路径,完成配置 原文地址 转载请注明出处]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Traverse the binary tree]]></title>
    <url>%2F2017%2F08%2F30%2FTraverse%20the%20binary%20tree%2F</url>
    <content type="text"><![CDATA[前几天做到不少关于二叉树的题,二叉树最基本的问题就是各种遍历,于是找时间整理了一下. 遍历是对树的一种最基本的运算，所谓遍历二叉树，就是按一定的规则和顺序走遍二叉树的所有结点，使每一个结点都被访问一次，而且只被访问一次。由于二叉树是非线性结构，因此，树的遍历实质上是将二叉树的各个结点转换成为一个线性序列来表示。 二叉树的遍历一般有四种: 先序遍历 首先访问根，再先序遍历左（右）子树，最后先序遍历右（左）子树 中序遍历 首先中序遍历左（右）子树，再访问根，最后中序遍历右（左）子树 后续遍历 首先后序遍历左（右）子树，再后序遍历右（左）子树，最后访问根 层序遍历 按照层次访问，通常用队列来做。访问根，访问子女，再访问子女的子女（越往后的层次越低）（两个子女的级别相同） 实现代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/** * 先序遍历，中序遍历，后续遍历 时间复杂度为O(n) * 层序遍历 时间复杂度为O(logn),最坏的情况下时间复杂度为O(n^2) * @author Administrator * */class TreeNode&#123; int val; TreeNode left; TreeNode right; TreeNode(int x) &#123;this.val = x;&#125;&#125;public class Test &#123; //先序遍历 public static void firstSearch(TreeNode root) &#123; if(root == null) return; System.out.print(root.val+" "); if(root.left!=null) firstSearch(root.left); if(root.right!=null) firstSearch(root.right); &#125; //中序遍历 public static void middleSerach(TreeNode root) &#123; if(root == null) return; if(root.left!=null) middleSerach(root.left); System.out.print(root.val+" "); if(root.right!=null) middleSerach(root.right); &#125; //后续遍历 public static void lastSearch(TreeNode root) &#123; if(root == null) return; if(root.left!=null) lastSearch(root.left); if(root.right!=null) lastSearch(root.right); System.out.print(root.val+" "); &#125; //层序遍历 public static void levalSearch(TreeNode root) &#123; Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); queue.add(root); int leval = 0; while(!queue.isEmpty()) &#123; int n = queue.size(); for(int i=0;i&lt;n;i++) &#123; TreeNode treeNode = queue.poll(); System.out.print(treeNode.val+" "); if(treeNode.left!=null) queue.add(treeNode.left); if(treeNode.right!=null) queue.add(treeNode.right); &#125; System.out.println(" 第"+(leval++)+"层"); &#125; &#125;&#125; 对于一个二叉树12345678结果为先序遍历:1 2 4 5 3 6 7 中序遍历:4 2 5 1 6 3 7 后续遍历:4 5 2 6 7 3 1 层序遍历:1 第0层2 3 第1层4 5 6 7 第2层 原文地址 转载请注明出处]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>binary tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[543.Diameter of Binary Tree]]></title>
    <url>%2F2017%2F08%2F05%2F543.Diameter%20of%20Binary%20Tree%2F</url>
    <content type="text"><![CDATA[题目描述Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.给定一个二叉树，计算任意两个节点之间最长路径的长度12345 1 / \ 2 3 / \4 5 Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].这是一个简单的动态规划的问题，通过深度遍历求最低节点所构成子树的最长路径，然后依次向上，保留路径的最大值，最终结果就是给定二叉树的最长路径。 实现代码123456789101112131415161718192021222324/** * Definition for a binary tree node. * public class TreeNode &#123; * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) &#123; val = x; &#125; * &#125; */public class Solution &#123; int maxlen = 0; public int maxdep(TreeNode root) &#123; if(root == null) return 0; int left = maxdep(root.left); int right = maxdep(root.right); maxlen = Math.max(maxlen,left+right); return Math.max(left,right)+1; &#125; public int diameterOfBinaryTree(TreeNode root) &#123; maxdep(root); return maxlen; &#125;&#125; Runtime: 9 ms 原文地址 转载请注明出处]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>binary tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[371.Sum of Two Integers]]></title>
    <url>%2F2017%2F08%2F03%2F371.Sum%20of%20Two%20Integers%2F</url>
    <content type="text"><![CDATA[题目描述Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.不使用加减号计算两个整数的和，找到了两种方法。 方法一1234567public int getSum(int a, int b) &#123; if(0 == b) return a; int cxor = a^b; int cand = a&amp;b; return getSum(cxor, cand&lt;&lt;1); &#125; 1.在二进制下,不考虑进位将a,b相加,即a^b.2.只考虑进位,即a&amp;b.3.将a&amp;b向前进一位.4.此时a+b就可以转化为另外两个数的和,直至b为0. 方法二1234int getSum(int a, int b) &#123; char *c = (char *)a; return (long) &amp;c[b]; &#125; 1.首先将a转换为地址类型,指针c指向该地址.2.c[b]就是相当于平时数组中的取下标为b的元素的值,就是说c[b]=c+sizeof(char*)b.3.因为c是指针，所以c[b]指向的是地址内的值,用&amp;来将该地址对应的值的地址取出来. 原文地址 转载请注明出处]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Operator</tag>
      </tags>
  </entry>
</search>