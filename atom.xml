<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lstop</title>
  <subtitle>lstop的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/"/>
  <updated>2017-09-22T02:56:06.984Z</updated>
  <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/</id>
  
  <author>
    <name>lstop</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建个人博客</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/09/21/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/09/21/搭建个人博客/</id>
    <published>2017-09-21T13:10:00.000Z</published>
    <updated>2017-09-22T02:56:06.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>1.Git<br>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。<br>官网下载地址<a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a><br>2.Node.js<br>Node.js是一种javascript的运行环境，能够使得javascript脱离浏览器运行。<br>官网下载地址<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a><br>3.Github<br>github是一个基于git的web 协作社区，它有多种机制让大家协同的和你一起的对项目进行贡献。<br>github全平台、全设备支持，你可以在任何终端上，随时随地的共享你的代码、评论或着其他有意义的信息。<br>世界上最大的开源软件社区。<br>Github官网<a href="https://github.com/">https://github.com/</a></p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>下载好Git之后一路next安装即可,安装完成后打开cmd窗口输入下面命令   </p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git --version</div><div class="line"></div><div class="line"><span class="code">```</span>       </div><div class="line"><span class="code">             </span></div><div class="line">![1](https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog1.png)                                        </div><div class="line">如图所示若出现版本号则安装成功</div><div class="line"></div><div class="line">安装Node.js</div><div class="line">---</div><div class="line">Node安装更加简单，还是一路”Next”,最后等待安装完成即可.然后输入</div></pre></td></tr></table></figure>
<p>node -v<br>npm -v</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="code">       </span></div><div class="line">![<span class="string">2</span>](<span class="link">https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog2.png</span>)                  </div><div class="line">安装成功则结果如图所示 </div><div class="line">Github仓库</div><div class="line"></div><div class="line">仓库准备</div><div class="line">---</div><div class="line">首先进入Github官网注册Github账号                                                    </div><div class="line">![<span class="string">3</span>](<span class="link">https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog3.png</span>)                 </div><div class="line">![<span class="string">4</span>](<span class="link">https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog4.png</span>)                                                                        </div><div class="line"><span class="code">				</span></div><div class="line">注册成功后,点击New repository新建一个仓库,在Repository name一栏输入yourname.github.io</div><div class="line">这就是你的博客的域名.注意yourname必须与你注册的用户名一致,比如我的用户名为lstop,对应的仓库名为lstop.github.io                          </div><div class="line">![<span class="string">5</span>](<span class="link">https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog5.png</span>)</div><div class="line"><span class="code">            </span></div><div class="line">然后进入仓库,会看到右上角有个Settings,点击打开这个库的setting页面，向下拖动，直到看见GitHub Pages,点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面.配置完成后,yourname.github.io这个网址就可以正常访问了.                           </div><div class="line">![<span class="string">61</span>](<span class="link">https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog61.jpg</span>)                       </div><div class="line">![<span class="string">62</span>](<span class="link">https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog62.jpg</span>)</div><div class="line"></div><div class="line">安装Hexo</div><div class="line">---</div><div class="line">hexo是基于node.js的静态博客，官网也是搭建在GitHub上的.</div><div class="line">首先在电脑上某个位置新建一个Blog的文件夹,然后鼠标右键会有一个Git Bash Here,点击打开,如下图所示    </div><div class="line">![<span class="string">71</span>](<span class="link">https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog71.png</span>)</div><div class="line">![<span class="string">72</span>](<span class="link">https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog72.png</span>)                            </div><div class="line">然后在命令行输入</div></pre></td></tr></table></figure>
<p>npm install hexo-cli -g<br>npm install hexo –save</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">等待Hexo安装完成</div><div class="line">输入</div></pre></td></tr></table></figure>
<p>hexo -v</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">查看是否安装成功</div><div class="line">![<span class="string">8</span>](<span class="link">https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog8.png</span>)</div><div class="line"></div><div class="line">初始化</div><div class="line">---</div><div class="line">执行命令</div></pre></td></tr></table></figure>
<p>hexo init<br>npm install</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">生成静态页面</div><div class="line">---</div></pre></td></tr></table></figure>
<p>hexo g </p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">本地启动</div><div class="line">---</div></pre></td></tr></table></figure>
<p>hexo s</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在看到下图提示之后,打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了</div><div class="line">![<span class="string">9</span>](<span class="link">https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog9.png</span>)</div><div class="line">大概就是这个样子</div><div class="line">![<span class="string">10</span>](<span class="link">https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog10.png</span>)</div><div class="line"></div><div class="line">部署到Gitub</div><div class="line">---</div><div class="line">首先要设置Git的username和email</div></pre></td></tr></table></figure>
<p>git config –global user.name “yourname”<br>git config –global user.email “youremail”</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后这里需要配置<span class="selector-tag">SSH</span> <span class="selector-tag">Keys</span>,如果不配置那么以后每次提交都要手动输入账号密码</div><div class="line"></div><div class="line">配置完成后打开<span class="selector-tag">Blog</span>目录下的_<span class="selector-tag">config</span><span class="selector-class">.yml</span>文件,打开找到<span class="selector-tag">Deployment</span>,将其替换为下面一段话</div></pre></td></tr></table></figure>
<h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>  type: git<br>  repository: git@github.com:yourname/yourname.github.io.git,master<br>  branch: master</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后再执行</div></pre></td></tr></table></figure>
<p>npm install hexo-deployer-git –save<br>hexo d</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">就基本上完成部署了,然后在浏览器输入https://yourname.github.io/就可以访问了</div><div class="line"></div><div class="line">写博客</div><div class="line">---</div><div class="line">在Blog\source\<span class="emphasis">_posts目录下新建.md文件,写好后执行命令</span></div></pre></td></tr></table></figure>
<p>hexo d -g</p>
<p>```</p>
<p>就可以发布到博客上</p>
<h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>现在Github上有好多主题可以直接使用,上面有很详细的配置教程<br><a href="https://hexo.io/themes/" target="_blank" rel="external">链接https://hexo.io/themes/</a></p>
<p><a href="https://lstop.github.io/2017/09/21/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" title="https://lstop.github.io/2017/09/21/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">原文地址</a> </p>
<p>转载请注明出处</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工具&quot;&gt;&lt;a href=&quot;#准备工具&quot; class=&quot;headerlink&quot; title=&quot;准备工具&quot;&gt;&lt;/a&gt;准备工具&lt;/h2&gt;&lt;p&gt;1.Git&lt;br&gt;Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。&lt;br&gt;官网下载地
    
    </summary>
    
      <category term="配置" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Hexo" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat配置</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/09/08/Tomcat%E9%85%8D%E7%BD%AE/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/09/08/Tomcat配置/</id>
    <published>2017-09-08T06:25:00.000Z</published>
    <updated>2017-09-09T09:38:25.170Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。<br><a id="more"></a> </p>
<h2 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h2><p>安装jdk<br>配置环境变量</p>
<h2 id="下载Tomcat"><a href="#下载Tomcat" class="headerlink" title="下载Tomcat"></a>下载Tomcat</h2><p>在tomcat官网就可以下载相应版本的tomcat<br>window版本下载地址:<br>tomcat7.0: <a href="http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.81/bin/apache-tomcat-7.0.81-windows-x86.zip" target="_blank" rel="external">32位</a>  <a href="http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.81/bin/apache-tomcat-7.0.81-windows-x64.zip" target="_blank" rel="external">64位</a><br>tomcat8.0: <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.0.46/bin/apache-tomcat-8.0.46-windows-x86.zip" target="_blank" rel="external">32位</a>  <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.0.46/bin/apache-tomcat-8.0.46-windows-x64.zip" target="_blank" rel="external">64位</a><br>tomcat8.5: <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.20/bin/apache-tomcat-8.5.20-windows-x86.zip" target="_blank" rel="external">32位</a>  <a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.20/bin/apache-tomcat-8.5.20-windows-x64.zip" target="_blank" rel="external">64位</a><br>tomcat9.0: <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-9/v9.0.0.M26/bin/apache-tomcat-9.0.0.M26-windows-x86.zip" target="_blank" rel="external">32位</a>  <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-9/v9.0.0.M26/bin/apache-tomcat-9.0.0.M26-windows-x64.zip" target="_blank" rel="external">64位</a>  </p>
<h2 id="在eclipse上配置Tomcat"><a href="#在eclipse上配置Tomcat" class="headerlink" title="在eclipse上配置Tomcat"></a>在eclipse上配置Tomcat</h2><p>1.选择菜单栏中的window——preferences<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/Tomcat%E9%85%8D%E7%BD%AE/1.png" alt="1"><br>2.选择左侧的 server——runtime environment——在弹出的窗口中选择add<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/Tomcat%E9%85%8D%E7%BD%AE/2.png" alt="2"><br>3.选择你的Tomcat的版本<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/Tomcat%E9%85%8D%E7%BD%AE/3.png" alt="3"><br>4.选择tomcat的路径,完成配置<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/Tomcat%E9%85%8D%E7%BD%AE/4.png" alt="4"></p>
<p><a href="https://lstop.github.io/2017/09/08/Tomcat%E9%85%8D%E7%BD%AE/" title="https://lstop.github.io/2017/09/08/Tomcat%E9%85%8D%E7%BD%AE/" target="_blank" rel="external">原文地址</a> </p>
<p>转载请注明出处</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="tomcat" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Traverse the binary tree</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/30/Traverse%20the%20binary%20tree/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/30/Traverse the binary tree/</id>
    <published>2017-08-30T14:15:00.000Z</published>
    <updated>2017-08-31T06:06:01.409Z</updated>
    
    <content type="html"><![CDATA[<p>  前几天做到不少关于二叉树的题,二叉树最基本的问题就是各种遍历,于是找时间整理了一下.<br>  遍历是对树的一种最基本的运算，所谓遍历二叉树，就是按一定的规则和顺序走遍二叉树的所有结点，使每一个结点都被访问一次，而且只被访问一次。由于二叉树是非线性结构，因此，树的遍历实质上是将二叉树的各个结点转换成为一个线性序列来表示。<br> <a id="more"></a><br> 二叉树的遍历一般有四种:</p>
<h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title=" 先序遍历"></a> 先序遍历</h2><p> 首先访问根，再先序遍历左（右）子树，最后先序遍历右（左）子树</p>
<h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title=" 中序遍历 "></a> 中序遍历 </h2><p> 首先中序遍历左（右）子树，再访问根，最后中序遍历右（左）子树</p>
<h2 id="后续遍历"><a href="#后续遍历" class="headerlink" title=" 后续遍历"></a> 后续遍历</h2><p> 首先后序遍历左（右）子树，再后序遍历右（左）子树，最后访问根</p>
<h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title=" 层序遍历"></a> 层序遍历</h2><p> 按照层次访问，通常用队列来做。访问根，访问子女，再访问子女的子女（越往后的层次越低）（两个子女的级别相同）</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title=" 实现代码"></a> 实现代码</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 先序遍历，中序遍历，后续遍历 时间复杂度为O(n)</span></div><div class="line"><span class="comment"> * 层序遍历 时间复杂度为O(logn),最坏的情况下时间复杂度为O(n^2)</span></div><div class="line"><span class="comment"> * @author Administrator</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">class</span> <span class="title">TreeNode</span>&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    TreeNode left;</div><div class="line">    TreeNode right;</div><div class="line">    TreeNode(<span class="keyword">int</span> x) &#123;<span class="keyword">this</span>.val = x;&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</div><div class="line">    <span class="comment">//先序遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">firstSearch</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</div><div class="line">        System.<span class="keyword">out</span>.print(root.val+<span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) firstSearch(root.left);</div><div class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) firstSearch(root.right);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//中序遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">middleSerach</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) middleSerach(root.left);</div><div class="line">        System.<span class="keyword">out</span>.print(root.val+<span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) middleSerach(root.right);	</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//后续遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lastSearch</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) lastSearch(root.left);</div><div class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) lastSearch(root.right);</div><div class="line">        System.<span class="keyword">out</span>.print(root.val+<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//层序遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">levalSearch</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        queue.<span class="keyword">add</span>(root);</div><div class="line">        <span class="keyword">int</span> leval = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">            <span class="keyword">int</span> n = queue.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">                TreeNode treeNode = queue.poll();</div><div class="line">                System.<span class="keyword">out</span>.print(treeNode.val+<span class="string">" "</span>);</div><div class="line">                <span class="keyword">if</span>(treeNode.left!=<span class="literal">null</span>) queue.<span class="keyword">add</span>(treeNode.left);</div><div class="line">                <span class="keyword">if</span>(treeNode.right!=<span class="literal">null</span>) queue.<span class="keyword">add</span>(treeNode.right);</div><div class="line">            &#125;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"    第"</span>+(leval++)+<span class="string">"层"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于一个二叉树<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1235384956,2951906414&amp;fm=26&amp;gp=0.jpg" alt=""><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">结果为</div><div class="line">先序遍历:1<span class="number"> 2 </span>4<span class="number"> 5 </span>3<span class="number"> 6 </span>7  </div><div class="line">中序遍历:4<span class="number"> 2 </span>5<span class="number"> 1 </span>6<span class="number"> 3 </span>7 </div><div class="line">后续遍历:4<span class="number"> 5 </span>2<span class="number"> 6 </span>7<span class="number"> 3 </span>1 </div><div class="line">层序遍历:</div><div class="line">1     第0层</div><div class="line">2<span class="number"> 3 </span>    第1层</div><div class="line">4<span class="number"> 5 </span>6<span class="number"> 7 </span>    第2层</div></pre></td></tr></table></figure></p>
<p><a href="https://lstop.github.io/2017/08/30/Traverse%20the%20binary%20tree/" title="https://lstop.github.io/2017/08/30/Traverse%20the%20binary%20tree/" target="_blank" rel="external">原文地址</a> </p>
<p>转载请注明出处</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  前几天做到不少关于二叉树的题,二叉树最基本的问题就是各种遍历,于是找时间整理了一下.&lt;br&gt;  遍历是对树的一种最基本的运算，所谓遍历二叉树，就是按一定的规则和顺序走遍二叉树的所有结点，使每一个结点都被访问一次，而且只被访问一次。由于二叉树是非线性结构，因此，树的遍历实质上是将二叉树的各个结点转换成为一个线性序列来表示。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/java/"/>
    
    
      <category term="binary tree" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>543.Diameter of Binary Tree</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/05/543.Diameter%20of%20Binary%20Tree/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/05/543.Diameter of Binary Tree/</id>
    <published>2017-08-05T04:00:00.000Z</published>
    <updated>2017-08-31T06:06:01.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.<br>给定一个二叉树，计算任意两个节点之间最长路径的长度<br><a id="more"></a><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">1</span></div><div class="line">   / \</div><div class="line">  <span class="number">2</span>   <span class="number">3</span></div><div class="line"> / \</div><div class="line"><span class="number">4</span>   <span class="number">5</span></div></pre></td></tr></table></figure></p>
<p>Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].<br>这是一个简单的动态规划的问题，通过深度遍历求最低节点所构成子树的最长路径，然后依次向上，保留路径的最大值，最终结果就是给定二叉树的最长路径。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> a binary tree node.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     TreeNode <span class="built_in">left</span>;</div><div class="line"> *     TreeNode <span class="built_in">right</span>;</div><div class="line"> *     TreeNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="built_in">int</span> maxlen = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxdep(TreeNode root) &#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</div><div class="line">            return <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = maxdep(root.<span class="built_in">left</span>);</div><div class="line">        <span class="built_in">int</span> <span class="built_in">right</span> = maxdep(root.<span class="built_in">right</span>);</div><div class="line">        maxlen = Math.max(maxlen,<span class="built_in">left</span>+<span class="built_in">right</span>);</div><div class="line">        return Math.max(<span class="built_in">left</span>,<span class="built_in">right</span>)+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> diameterOfBinaryTree(TreeNode root) &#123;</div><div class="line">        maxdep(root);</div><div class="line">        return maxlen;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Runtime: 9 ms</p>
<p><a href="https://lstop.github.io/2017/08/05/543.Diameter%20of%20Binary%20Tree/" title="https://lstop.github.io/2017/08/05/543.Diameter%20of%20Binary%20Tree/" target="_blank" rel="external">原文地址</a></p>
<p>转载请注明出处</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.&lt;br&gt;给定一个二叉树，计算任意两个节点之间最长路径的长度&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/leetcode/"/>
    
    
      <category term="binary tree" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>371.Sum of Two Integers</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/03/371.Sum%20of%20Two%20Integers/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/03/371.Sum of Two Integers/</id>
    <published>2017-08-03T07:36:00.000Z</published>
    <updated>2017-09-09T09:37:31.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.<br>不使用加减号计算两个整数的和，找到了两种方法。<br><a id="more"></a> </p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span> == b)  </div><div class="line">            <span class="keyword">return</span> a;  </div><div class="line">        <span class="keyword">int</span> cxor = a^b;  </div><div class="line">        <span class="keyword">int</span> cand = a&amp;b;  </div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="title">getSum</span><span class="params">(cxor, cand&lt;&lt;<span class="number">1</span>)</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.在二进制下,不考虑进位将a,b相加,即a^b.<br>2.只考虑进位,即a&amp;b.<br>3.将a&amp;b向前进一位.<br>4.此时a+b就可以转化为另外两个数的和,直至b为0.</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span> *c = (<span class="keyword">char</span> *)a;  </div><div class="line">        <span class="keyword">return</span> (<span class="keyword">long</span>) &amp;c[b];  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>1.首先将a转换为地址类型,指针c指向该地址.<br>2.c[b]就是相当于平时数组中的取下标为b的元素的值,就是说c[b]=c+sizeof(char*)b.<br>3.因为c是指针，所以c[b]指向的是地址内的值,用&amp;来将该地址对应的值的地址取出来.</p>
<p><a href="https://lstop.github.io/2017/08/03/371.Sum%20of%20Two%20Integers/" title="https://lstop.github.io/2017/08/03/371.Sum%20of%20Two%20Integers/" target="_blank" rel="external">原文地址</a></p>
<p>转载请注明出处</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.&lt;br&gt;不使用加减号计算两个整数的和，找到了两种方法。&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/leetcode/"/>
    
    
      <category term="Operator" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/Operator/"/>
    
  </entry>
  
</feed>
