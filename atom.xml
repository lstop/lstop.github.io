<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lstop</title>
  <subtitle>lstop的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/"/>
  <updated>2017-09-22T06:22:48.061Z</updated>
  <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/</id>
  
  <author>
    <name>lstop</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  <entry>
    <title>OpenStack配置</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/09/15/OpenStack/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/09/15/OpenStack/</id>
    <published>2017-09-21T13:10:00.000Z</published>
    <updated>2017-09-22T06:22:48.061Z</updated>
    
    <content type="html"><![CDATA[
      <h4>一、安装环境准备</h4>
<h5>1.1 OpenStack官方的硬件要求</h5>
<p><img src='file://C:/Users/liufei/AppData/Roaming/Typora/typora-user-images/1540862049333.png' alt='1540862049333' referrerPolicy='no-referrer' /></p>
<p>其中虚线部分是可选的，分别为块存储节点与对象存储节点。</p>
<h5>1.2 硬件配置</h5>
<pre><code>控制节点： cpu 1 ，内存 2G，存储 25G，网卡 2张
计算节点： cpu 1 ，内存 2G，存储 25G，网卡 2张
</code></pre>
<h5>1.3 主机网络</h5>
<p><img src='file://C:/Users/liufei/Desktop/networklayout.png' alt='' referrerPolicy='no-referrer' /></p>
<p>控制节点</p>
<pre><code>eth0：
IPADDR=192.168.168.95
NETMASK=255.255.255.0
GATEWAY=192.168.168.1
eth1：
DEVICE=eth1
TYPE=Ethernet
ONBOOT=yes
BOOTPROTO=none
</code></pre>
<p>计算节点</p>
<pre><code>eth0：
IPADDR=192.168.168.96
NETMASK=255.255.255.0
GATEWAY=192.168.168.1
eth1：
DEVICE=eth1
TYPE=Ethernet
ONBOOT=yes
BOOTPROTO=none
</code></pre>
<h5>1.4 修改主机名</h5>
<p>编辑文件/etc/hostname，删除原有内容，然后添加自己的主机名：</p>
<pre><code># vi /etc/hostname
控制节点添加：
controlle
计算节点添加：
compute
</code></pre>
<p>（修改完成之后如果没生效，可以退出登录一次或者重启一次。）</p>
<h5>1.5 增加主机名解析</h5>
<p>编辑文件/etc/hosts，在其中增加如下内容：</p>
<pre><code># vi /etc/hosts
控制节点和计算节点都添加：
192.168.168.95 controller
192.168.168.96 compute
</code></pre>
<h5>1.6 关闭防火墙</h5>
<pre><code># systemctl disable firewalld
# systemctl stop firewalld
</code></pre>
<h5>1.7 禁用selinux</h5>
<p>编辑/etc/selinux/config</p>
<pre><code># vi /etc/selinux/config
修改：
SELINUX=disabled
</code></pre>
<p>（selinux的设置需要重启节点才能生效。）</p>
<h4>二、OpenStack基础环境安装</h4>
<h5>2.1 （控制节点）安装ntp服务</h5>
<p>安装chrony</p>
<pre><code># yum install chrony -y 
</code></pre>
<p>编辑配置文件/etc/chrony.conf</p>
<pre><code># vi /etc/chrony.conf
增加：
server controller iburst
allow 192.168.168.0/24 （允许其他节点可以连接到控制节点，这里设置的是控制节点eth0的CIDR）
</code></pre>
<p>设置服务的开机启动，并启动服务</p>
<pre><code># systemctl enable chronyd
# systemctl start chronyd
</code></pre>
<h5>2.2 （计算节点）安装ntp服务</h5>
<p>安装chrony</p>
<pre><code># yum install chrony -y
</code></pre>
<p>编辑配置文件/etc/chrony.conf，增加如下内容：</p>
<pre><code># vi /etc/chrony.conf
增加：
server controller iburst
</code></pre>
<p>设置服务的开机启动，并启动服务</p>
<pre><code># systemctl enable chronyd
# systemctl start chronyd
</code></pre>
<h5>2.3 （控制节点、计算节点）安装OpenStack</h5>
<p>安装OpenStack客户端之前，要先安装open stack，这里安装的是Q版</p>
<pre><code># yum install centos-release-openstack-queens
# yum install https://repos.fedorapeople.org/repos/openstack/openstack-queens/rdo-release-queens-1.noarch.rpm
# yum upgrade
</code></pre>
<p>（升级完成之后重启节点）</p>
<h5>2.4 （控制节点、计算节点）安装OpenStack客户端</h5>
<pre><code># yum install python-openstackclient -y
</code></pre>
<h5>2.5 （控制节点、计算节点）安装openstack-selinux</h5>
<pre><code># yum install openstack-selinux -y
</code></pre>
<h5>2.6 （控制节点）sql数据库安装</h5>
<p>安装数据库</p>
<pre><code># yum install mariadb mariadb-server python2-PyMySQL -y
</code></pre>
<p>创建并编辑文件/etc/my.cnf.d/openstack.cnf，增加如下内容：</p>
<pre><code># vi /etc/my.cnf.d/openstack.cnf
增加：
#配置其它节点可以通过管理网络访问数据库
[mysqld]
bind-address = 192.168.168.95

#启用一些有用的选项和 UTF-8 字符集
default-storage-engine = innodb
innodb_file_per_table = on
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8
</code></pre>
<p>设置数据库服务的开机启动，并启动服务</p>
<pre><code># systemctl enable mariadb.service
# systemctl start mariadb.service
</code></pre>
<p>为数据库设置密码</p>
<pre><code># mysql_secure_installation

NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!

In order to log into MariaDB to secure it, we&#39;ll need the current
password for the root user.  If you&#39;ve just installed MariaDB, and
you haven&#39;t set the root password yet, the password will be blank,
so you should just press enter here.

Enter current password for root (enter for none):   #这里直接回车
OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

Set root password? [Y/n] y
New password: 
Re-enter new password:              #设置数据库的root密码，gyyf2018
Password updated successfully!
Reloading privilege tables..
 ... Success!


By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.

Remove anonymous users? [Y/n] y
 ... Success!

Normally, root should only be allowed to connect from &#39;localhost&#39;.  This
ensures that someone cannot guess at the root password from the network.

Disallow root login remotely? [Y/n] y
 ... Success!

By default, MariaDB comes with a database named &#39;test&#39; that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.

Remove test database and access to it? [Y/n] y
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

Reload privilege tables now? [Y/n] y
 ... Success!

Cleaning up...

All done!  If you&#39;ve completed all of the above steps, your MariaDB
installation should now be secure.

Thanks for using MariaDB!
</code></pre>
<h5>2.7 （控制节点）安装消息队列</h5>
<p>安装软件包</p>
<pre><code># yum install rabbitmq-server -y
</code></pre>
<p>设置消息队列服务的开机自启，并启动服务</p>
<pre><code># systemctl enable rabbitmq-server.service
# systemctl start rabbitmq-server.service
</code></pre>
<p>添加openstack用户并设置openstack使用消息队列的权限</p>
<pre><code># rabbitmqctl add_user openstack gyyf2018
Creating user &quot;openstack&quot; ...

# rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;
Setting permissions for user &quot;openstack&quot; in vhost &quot;/&quot; ...
</code></pre>
<h5>2.8 （控制节点）安装memcached服务</h5>
<p>安装软件包</p>
<pre><code># yum install memcached python-memcached -y
</code></pre>
<p>编辑/etc/sysconfig/memcached，修改以下内容</p>
<pre><code># vi /etc/sysconfig/memcached
修改：
OPTIONS=&quot;-l 127.0.0.1,::1,controller&quot;
</code></pre>
<p>设置服务开机自启动，并启动服务</p>
<pre><code># systemctl enable memcached.service
# systemctl start memcached.service
</code></pre>
<h5>2.9 （控制节点）安装etcd服务</h5>
<p>安装软件包</p>
<pre><code># yum install etcd -y
</code></pre>
<p>编辑文件/etc/etcd/etcd.conf，设置以下内容</p>
<pre><code># vi /etc/etcd/etcd.conf
修改：
#[Member]
#ETCD_CORS=&quot;&quot;
ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;
#ETCD_WAL_DIR=&quot;&quot;
ETCD_LISTEN_PEER_URLS=&quot;http://localhost:2380&quot;
ETCD_LISTEN_CLIENT_URLS=&quot;http://localhost:2379&quot;
#ETCD_MAX_SNAPSHOTS=&quot;5&quot;
#ETCD_MAX_WALS=&quot;5&quot;
ETCD_NAME=&quot;controller&quot;
#ETCD_SNAPSHOT_COUNT=&quot;100000&quot;
#ETCD_HEARTBEAT_INTERVAL=&quot;100&quot;
#ETCD_ELECTION_TIMEOUT=&quot;1000&quot;
#ETCD_QUOTA_BACKEND_BYTES=&quot;0&quot;
#ETCD_MAX_REQUEST_BYTES=&quot;1572864&quot;
#ETCD_GRPC_KEEPALIVE_MIN_TIME=&quot;5s&quot;
#ETCD_GRPC_KEEPALIVE_INTERVAL=&quot;2h0m0s&quot;
#ETCD_GRPC_KEEPALIVE_TIMEOUT=&quot;20s&quot;
#
#[Clustering]
ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;http://localhost:2380&quot;
ETCD_ADVERTISE_CLIENT_URLS=&quot;http://localhost:2379&quot;
#ETCD_DISCOVERY=&quot;&quot;
#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;
#ETCD_DISCOVERY_PROXY=&quot;&quot;
#ETCD_DISCOVERY_SRV=&quot;&quot;
ETCD_INITIAL_CLUSTER=&quot;controller=http://localhost:2380&quot;
ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster-01&quot;
ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot; 
</code></pre>
<p>设置开机服务自启动，并启动服务</p>
<pre><code># systemctl enable etcd
# systemctl start etcd
</code></pre>
<h4>三、OpenStack认证服务安装</h4>
<h5>3.1 （控制节点）创建并配置keystone数据库</h5>
<p>连接数据库</p>
<pre><code># mysql -u root -pgyyf2018
</code></pre>
<p>创建数据库，设置keystone数据库的访问权限</p>
<pre><code>MariaDB [(none)]&gt; CREATE DATABASE keystone;
MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON keystone.* TO &#39;keystone&#39;@&#39;localhost&#39; \
IDENTIFIED BY &#39;gyyf2018&#39;;
MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON keystone.* TO &#39;keystone&#39;@&#39;%&#39; \
IDENTIFIED BY &#39;gyyf2018&#39;;              

</code></pre>
<h5>3.2 <strong>（控制节点）安装并配置服务</strong> </h5>
<p>安装软件包</p>
<pre><code># yum install openstack-keystone httpd mod_wsgi -y

</code></pre>
<p>编辑/etc/keystone/keystone.conf，设置以下内容</p>
<pre><code># vi /etc/keystone/keystone.conf
修改：
#配置数据库访问
[database]
connection = mysql+pymysql://keystone:gyyf2018@controller/keystone
...

#配置Fernet UUID令牌的提供者
[token]
provider = fernet
...

</code></pre>
<p>导入keystone数据库表结构</p>
<pre><code># su -s /bin/sh -c &quot;keystone-manage db_sync&quot; keystone

</code></pre>
<p>初始化，引导认证服务</p>
<pre><code># keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
# keystone-manage credential_setup --keystone-user keystone --keystone-group keystone

# keystone-manage bootstrap --bootstrap-password gyyf2018 \
  --bootstrap-admin-url http://controller:35357/v3/ \
  --bootstrap-internal-url http://controller:5000/v3/ \
  --bootstrap-public-url http://controller:5000/v3/ \
  --bootstrap-region-id RegionOne

</code></pre>
<h5>3.3 <strong>（控制节点）配置apache服务</strong> </h5>
<p>编辑文件/etc/httpd/conf/httpd.conf</p>
<pre><code># vi /etc/httpd/conf/httpd.conf
添加：
ServerName controller

</code></pre>
<p>创建链接文件，设置服务的开机启动</p>
<pre><code># ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/

# systemctl enable httpd.service
# systemctl start httpd.service

</code></pre>
<h5>3.4 <strong>（控制节点）创建相关域、项目、用户和角色</strong> </h5>
<p>导入管理员环境变量信息</p>
<pre><code># export OS_USERNAME=admin
# export OS_PASSWORD=gyyf2018
# export OS_PROJECT_NAME=admin
# export OS_USER_DOMAIN_NAME=Default
# export OS_PROJECT_DOMAIN_NAME=Default
# export OS_AUTH_URL=http://controller:35357/v3
# export OS_IDENTITY_API_VERSION=3

</code></pre>
<p>创建域</p>
<pre><code># openstack domain create --description &quot;An Example Domain&quot; example

+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description | An Example Domain                |
| enabled     | True                             |
| id          | 28d83de95e064d909f3c82de49e49982 |
| name        | example                          |
| tags        | []                               |
+-------------+----------------------------------+

</code></pre>
<p>创建service项目</p>
<pre><code># openstack project create --domain default \
  --description &quot;Service Project&quot; service
  
+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description | Service Project                  |
| domain_id   | default                          |
| enabled     | True                             |
| id          | d5442e942ee1481281d78e0a81d19601 |
| is_domain   | False                            |
| name        | service                          |
| parent_id   | default                          |
| tags        | []                               |
+-------------+----------------------------------+

</code></pre>
<p>创建demo项目</p>
<pre><code># openstack project create --domain default \
  --description &quot;Demo Project&quot; demo
  
+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description | Demo Project                     |
| domain_id   | default                          |
| enabled     | True                             |
| id          | 3f3f3e87192d4b5bb32b2a9db39a4be0 |
| is_domain   | False                            |
| name        | demo                             |
| parent_id   | default                          |
| tags        | []                               |
+-------------+----------------------------------+

</code></pre>
<p>创建demo用户</p>
<pre><code># openstack user create --domain default \
  --password-prompt demo

User Password:
Repeat User Password:         --设置demo用户的密码，gyyf2018
+---------------------+----------------------------------+
| Field               | Value                            |
+---------------------+----------------------------------+
| domain_id           | default                          |
| enabled             | True                             |
| id                  | daf47114440741d3b213a5eb58a58006 |
| name                | demo                             |
| options             | {}                               |
| password_expires_at | None                             |
+---------------------+----------------------------------+

</code></pre>
<p>创建用户角色</p>
<pre><code># openstack role create user

+-----------+----------------------------------+
| Field     | Value                            |
+-----------+----------------------------------+
| domain_id | None                             |
| id        | 10a36ef5803045dda2df3ed3480ce2bd |
| name      | user                             |
+-----------+----------------------------------+

</code></pre>
<p>给demo用户添加user角色</p>
<pre><code># openstack role add --project demo --user demo user

</code></pre>
<h5>3.5 （控制节点）验证操作</h5>
<p>解除环境变量的设置</p>
<pre><code># unset OS_AUTH_URL OS_PASSWORD

</code></pre>
<p>使用admin用户请求token</p>
<pre><code># openstack --os-auth-url http://controller:35357/v3 \
  --os-project-domain-name Default --os-user-domain-name Default \
  --os-project-name admin --os-username admin token issue
  
Password: gyyf2018
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Field      | Value                                                                                                                                                                                   |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| expires    | 2018-04-25T12:09:55+0000                                                                                                                                                                |
| id         | gAAAAABa4GID_fKwaNHti1QiDmjG4Ox0113RmaZ7DpMytBBB6gEsMoPTrHArevpYK1-gqv3UOPPSb6emHe29YfxxsXZBqfiq3C4IijCm5e-XetfgXarAsfgvlzAsao6jFkmLKbhMklzBZOA7ZH0t_TZJi_SuD5lkVsQv5wdWlPbQlgA4VvS0vmA |
| project_id | c4e73f33137b49dcb1ff949f3d95de36                                                                                                                                                        |
| user_id    | 88c329ab63b34c57a8996c5237cb1ba3                                                                                                                                                        |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

</code></pre>
<p>使用demo用户请求token</p>
<pre><code># openstack --os-auth-url http://controller:5000/v3 \
  --os-project-domain-name Default --os-user-domain-name Default \
  --os-project-name demo --os-username demo token issue

Password: gyyf2018
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Field      | Value                                                                                                                                                                                   |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| expires    | 2018-04-25T12:12:28+0000                                                                                                                                                                |
| id         | gAAAAABa4GKcKjwpbL2NqgpDXk1lrkmwEjbj_gLfDf3DmR2xmI9TfA4W85ZSX8ql-Jjol8o3wmbWT2CL4--Ekhi3eciwtRYdLZke3Pf0jCRsZBpFeWSQQSb5yLpl5haQ78thAyBusUfkZTB7i1oOwjyl6_16OyJYpMm74l9IpWI6pqaIy4AKjLE |
| project_id | 3f3f3e87192d4b5bb32b2a9db39a4be0                                                                                                                                                        |
| user_id    | daf47114440741d3b213a5eb58a58006                                                                                                                                                        |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

</code></pre>
<h5>3.6 （控制节点）创建环境变量脚本</h5>
<p>随便找个地方，比如/opt</p>
<p>创建admin-openrc文件增加如下内容</p>
<pre><code># vi admin-openrc
增加：
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=gyyf2018
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2

</code></pre>
<p>创建demo-openrc文件增加如下内容</p>
<pre><code># vi demo-openrc
增加：
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=demo
export OS_USERNAME=demo
export OS_PASSWORD=gyyf2018
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2

</code></pre>
<p>验证下脚本的效果</p>
<pre><code># . admin-openrc
# openstack token issue

+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Field      | Value                                                                                                                                                                                   |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| expires    | 2018-04-25T12:18:13+0000                                                                                                                                                                |
| id         | gAAAAABa4GP1AoWBOcAHW9w1nr2CNlBs3HqK1-bzXsDekLtiHiEtkWbpxPMiloUv2x3uhZ2kM7XJtP9V4Ugy9BMev9cvV1qy1GZh_U-EElJlLEf4IgBf4SiCGGd2BjQiq0cCT55y2cXK8pmRKZKIlzFUwoBCHpc75yqnEJk6Rz3Upsk7HYT3c0k |
| project_id | c4e73f33137b49dcb1ff949f3d95de36                                                                                                                                                        |
| user_id    | 88c329ab63b34c57a8996c5237cb1ba3                                                                                                                                                        |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

</code></pre>
<h4>四、OpenStack镜像服务安装</h4>
<h5>4.1 （控制节点）配置镜像数据库</h5>
<p>连接数据库</p>
<pre><code># mysql -u root -pgyyf2018

</code></pre>
<p>创建glance数据库并设置访问权限</p>
<pre><code>MariaDB [(none)]&gt; CREATE DATABASE glance;

MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON glance.* TO &#39;glance&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;gyyf2018&#39;;

MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON glance.* TO &#39;glance&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;gyyf2018&#39;;

</code></pre>
<h5>4.2 （控制节点）创建glance认证相关信息</h5>
<p>设置admin环境变量</p>
<pre><code># . admin-openrc

</code></pre>
<p>创建glance用户</p>
<pre><code># openstack user create --domain default --password-prompt glance

User Password:
Repeat User Password:       设置glance用户密码，gyyf2018
+---------------------+----------------------------------+
| Field               | Value                            |
+---------------------+----------------------------------+
| domain_id           | default                          |
| enabled             | True                             |
| id                  | 0bf68fa1a87c4760859f9f34697a8753 |
| name                | glance                           |
| options             | {}                               |
| password_expires_at | None                             |
+---------------------+----------------------------------+

</code></pre>
<p>将glance用户加入service项目，并设置admin角色</p>
<pre><code># openstack role add --project service --user glance admin

</code></pre>
<p>创建镜像服务</p>
<pre><code># openstack service create --name glance \
  --description &quot;OpenStack Image&quot; image
  
+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description | OpenStack Image                  |
| enabled     | True                             |
| id          | 520b45f9c795468ab50a5c7c363babef |
| name        | glance                           |
| type        | image                            |
+-------------+----------------------------------+

</code></pre>
<p>创建镜像api端口</p>
<pre><code># openstack endpoint create --region RegionOne \
  image public http://controller:9292

+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | ff8c65b2d96c4329a85954ed4ac13853 |
| interface    | public                           |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 520b45f9c795468ab50a5c7c363babef |
| service_name | glance                           |
| service_type | image                            |
| url          | http://controller:9292           |
+--------------+----------------------------------+

# openstack endpoint create --region RegionOne \
  image internal http://controller:9292

+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 5d930d23645541b3ad76c9bb29426519 |
| interface    | internal                         |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 520b45f9c795468ab50a5c7c363babef |
| service_name | glance                           |
| service_type | image                            |
| url          | http://controller:9292           |
+--------------+----------------------------------+

# openstack endpoint create --region RegionOne \
  image admin http://controller:9292

+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | e0fc9759fb7b4d4790d225aaedcdcf31 |
| interface    | admin                            |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 520b45f9c795468ab50a5c7c363babef |
| service_name | glance                           |
| service_type | image                            |
| url          | http://controller:9292           |
+--------------+----------------------------------+

</code></pre>
<h5>4.3 （控制节点）安装软件包并配置配置文件</h5>
<p>安装软件包</p>
<pre><code># yum install openstack-glance -y

</code></pre>
<p>编辑/etc/glance/glance-api.conf文件并完成下面配置</p>
<pre><code># vi /etc/glance/glance-api.conf
修改：
#配置数据库访问
[database]
connection = mysql+pymysql://glance:gyyf2018@controller/glance
...

#配置认证服务访问
[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = glance
password = gyyf2018
...

[paste_deploy]
flavor = keystone
...

#配置本地文件系统存储和镜像文件位置
[glance_store]
stores = file,http
default_store = file
filesystem_store_datadir = /var/lib/glance/images/
...

</code></pre>
<p>编辑/etc/glance/glance-registry.conf文件，完成以下配置</p>
<pre><code># vi /etc/glance/glance-registry.conf
修改：
#配置数据库访问
[database]
connection = mysql+pymysql://glance:gyyf2018@controller/glance
...

#配置认证服务访问
[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = glance
password = gyyf2018
...

[paste_deploy]
flavor = keystone
...

</code></pre>
<p>同步数据库</p>
<pre><code># su -s /bin/sh -c &quot;glance-manage db_sync&quot; glance

</code></pre>
<p>设置服务的开机自启动，并启动服务</p>
<pre><code># systemctl enable openstack-glance-api.service \
  openstack-glance-registry.service
# systemctl start openstack-glance-api.service \
  openstack-glance-registry.service

</code></pre>
<h5>4.4 <strong>（控制节点）验证操作</strong> </h5>
<p> 设置环境变量</p>
<pre><code># . admin-openrc

</code></pre>
<p>下载镜像</p>
<pre><code># yum install wget -y
# wget http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img

</code></pre>
<p>上传镜像</p>
<pre><code># openstack image create &quot;cirros&quot; \
  --file cirros-0.3.5-x86_64-disk.img \
  --disk-format qcow2 --container-format bare \
  --public

+------------------+------------------------------------------------------+
| Field            | Value                                                |
+------------------+------------------------------------------------------+
| checksum         | f8ab98ff5e73ebab884d80c9dc9c7290                     |
| container_format | bare                                                 |
| created_at       | 2018-04-25T12:13:57Z                                 |
| disk_format      | qcow2                                                |
| file             | /v2/images/0466e837-7d0c-4ebd-a2a1-194e80635d98/file |
| id               | 0466e837-7d0c-4ebd-a2a1-194e80635d98                 |
| min_disk         | 0                                                    |
| min_ram          | 0                                                    |
| name             | cirros                                               |
| owner            | c4e73f33137b49dcb1ff949f3d95de36                     |
| protected        | False                                                |
| schema           | /v2/schemas/image                                    |
| size             | 13267968                                             |
| status           | active                                               |
| tags             |                                                      |
| updated_at       | 2018-04-25T12:14:58Z                                 |
| virtual_size     | None                                                 |
| visibility       | public                                               |
+------------------+------------------------------------------------------+

</code></pre>
<p>确认下镜像是否成功上传</p>
<pre><code># openstack image list

+--------------------------------------+--------+--------+
| ID                                   | Name   | Status |
+--------------------------------------+--------+--------+
| 0466e837-7d0c-4ebd-a2a1-194e80635d98 | cirros | active |
+--------------------------------------+--------+--------+

</code></pre>
<h4>五、OpenStack计算服务安装</h4>
<h5>5.1 <strong>（控制节点）配置数据库</strong> </h5>
<p>连接数据库</p>
<pre><code># mysql -u root -pgyyf2018

</code></pre>
<p>创建nova相关数据库并设置访问权限</p>
<pre><code>MariaDB [(none)]&gt; CREATE DATABASE nova_api;
MariaDB [(none)]&gt; CREATE DATABASE nova;
MariaDB [(none)]&gt; CREATE DATABASE nova_cell0;


MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_api.* TO &#39;nova&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;gyyf2018&#39;;
MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_api.* TO &#39;nova&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;gyyf2018&#39;;

MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova.* TO &#39;nova&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;gyyf2018&#39;;
MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova.* TO &#39;nova&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;gyyf2018&#39;;

MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_cell0.* TO &#39;nova&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;gyyf2018&#39;;
MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_cell0.* TO &#39;nova&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;gyyf2018&#39;;

</code></pre>
<h5>5.2 （控制节点）创建nova认证相关信息</h5>
<p>设置admin环境变量</p>
<pre><code># . admin-openrc

</code></pre>
<p>创建nova用户</p>
<pre><code># openstack user create --domain default --password-prompt nova

User Password:
Repeat User Password:        设置nova用户的密码，gyyf2018
+---------------------+----------------------------------+
| Field               | Value                            |
+---------------------+----------------------------------+
| domain_id           | default                          |
| enabled             | True                             |
| id                  | 1cde1ce579c241a5906684adba106d93 |
| name                | nova                             |
| options             | {}                               |
| password_expires_at | None                             |
+---------------------+----------------------------------+

</code></pre>
<p>给nova用户添加admin角色</p>
<pre><code># openstack role add --project service --user nova admin

</code></pre>
<p>创建nova服务</p>
<pre><code># openstack service create --name nova \
  --description &quot;OpenStack Compute&quot; compute

+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description | OpenStack Compute                |
| enabled     | True                             |
| id          | 01ffdb12a467441a94d0f3aba7b85136 |
| name        | nova                             |
| type        | compute                          |
+-------------+----------------------------------+

</code></pre>
<p>创建计算api端口</p>
<pre><code># openstack endpoint create --region RegionOne \
  compute public http://controller:8774/v2.1

+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 88c9171ba5ee481c9031f59c18e72d8e |
| interface    | public                           |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 01ffdb12a467441a94d0f3aba7b85136 |
| service_name | nova                             |
| service_type | compute                          |
| url          | http://controller:8774/v2.1      |
+--------------+----------------------------------+

# openstack endpoint create --region RegionOne \
  compute internal http://controller:8774/v2.1

+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 53121a04b0f14da69a13dcb8323c0304 |
| interface    | internal                         |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 01ffdb12a467441a94d0f3aba7b85136 |
| service_name | nova                             |
| service_type | compute                          |
| url          | http://controller:8774/v2.1      |
+--------------+----------------------------------+

# openstack endpoint create --region RegionOne \
  compute admin http://controller:8774/v2.1

+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 31e7047e34104204aeddca406a534b81 |
| interface    | admin                            |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 01ffdb12a467441a94d0f3aba7b85136 |
| service_name | nova                             |
| service_type | compute                          |
| url          | http://controller:8774/v2.1      |
+--------------+----------------------------------+

</code></pre>
<p>创建placement服务用户</p>
<pre><code># openstack user create --domain default --password-prompt placement
User Password:
Repeat User Password:        设置placement用户的密码，gyyf2018
+---------------------+----------------------------------+
| Field               | Value                            |
+---------------------+----------------------------------+
| domain_id           | default                          |
| enabled             | True                             |
| id                  | cef9b0bd33a14f20b375f864f148822f |
| name                | placement                        |
| options             | {}                               |
| password_expires_at | None                             |
+---------------------+----------------------------------+

</code></pre>
<p>添加placement用户到服务项目</p>
<pre><code># openstack role add --project service --user placement admin

</code></pre>
<p>创建placement api服务</p>
<pre><code># openstack service create --name placement --description &quot;Placement API&quot; placement

+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description | Placement API                    |
| enabled     | True                             |
| id          | 4822cd7e915a4470aeecbc24643a5ee8 |
| name        | placement                        |
| type        | placement                        |
+-------------+----------------------------------+

</code></pre>
<p>创建placement api服务端口</p>
<pre><code># openstack endpoint create --region RegionOne placement public http://controller:8778

+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 848bc5a3161a4de88cc3ac77964487ad |
| interface    | public                           |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 4822cd7e915a4470aeecbc24643a5ee8 |
| service_name | placement                        |
| service_type | placement                        |
| url          | http://controller:8778           |
+--------------+----------------------------------+

# openstack endpoint create --region RegionOne placement internal http://controller:8778

+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | fe72f5f0207840c6a05a836955179941 |
| interface    | internal                         |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 4822cd7e915a4470aeecbc24643a5ee8 |
| service_name | placement                        |
| service_type | placement                        |
| url          | http://controller:8778           |
+--------------+----------------------------------+

# openstack endpoint create --region RegionOne placement admin http://controller:8778

+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 13fc18d3fe6a422c8e0008522ae9c617 |
| interface    | admin                            |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 4822cd7e915a4470aeecbc24643a5ee8 |
| service_name | placement                        |
| service_type | placement                        |
| url          | http://controller:8778           |
+--------------+----------------------------------+

</code></pre>
<h5>5.3 （控制节点）安装软件包并配置组件</h5>
<p>安装软件包</p>
<pre><code># yum install openstack-nova-api openstack-nova-conductor \
  openstack-nova-console openstack-nova-novncproxy \
  openstack-nova-scheduler openstack-nova-placement-api -y

</code></pre>
<p>编辑/etc/nova/nova.conf文件并完成以下配置</p>
<pre><code># vi /etc/nova/nova.conf
修改：
#启用计算和元数据API，配置消息队列访问，使用 Networking 服务
[DEFAULT]
enabled_apis = osapi_compute,metadata
transport_url = rabbit://openstack:gyyf2018@controller
my_ip = 192.168.168.95
use_neutron = True
firewall_driver = nova.virt.firewall.NoopFirewallDriver
...

#配置数据库连接
[api_database]
connection = mysql+pymysql://nova:gyyf2018@controller/nova_api
...

[database]
connection = mysql+pymysql://nova:gyyf2018@controller/nova
...

[api]
auth_strategy = keystone
...

#配置认证服务访问
[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = nova
password = gyyf2018
...

#配置VNC代理
[vnc]
enabled = true
server_listen = $my_ip
server_proxyclient_address = $my_ip
...

#配置镜像服务 API 的位置
[glance]
api_servers = http://controller:9292
...

#配置锁路径
[oslo_concurrency]
lock_path = /var/lib/nova/tmp
...

#配置缓存服务
[placement]
os_region_name = RegionOne
project_domain_name = Default
project_name = service
auth_type = password
user_domain_name = Default
auth_url = http://controller:35357/v3
username = placement
password = gyyf2018
...

</code></pre>
<p>因为软件包的bug，编辑/etc/httpd/conf.d/00-nova-placement-api.conf文件增加如下内容</p>
<pre><code># vi /etc/httpd/conf.d/00-nova-placement-api.conf
添加：
&lt;Directory /usr/bin&gt;
  &lt;IfVersion &gt;= 2.4&gt;
    Require all granted
  &lt;/IfVersion&gt;
  &lt;IfVersion &lt; 2.4&gt;
    Order allow,deny
    Allow from all
  &lt;/IfVersion&gt;
&lt;/Directory&gt;

</code></pre>
<p>重启httpd服务</p>
<pre><code># systemctl restart httpd

</code></pre>
<p>导入相关数据库表结构</p>
<pre><code># su -s /bin/sh -c &quot;nova-manage api_db sync&quot; nova
这里会有worning，不影响
# su -s /bin/sh -c &quot;nova-manage cell_v2 map_cell0&quot; nova
# su -s /bin/sh -c &quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot; nova
c354ac0-a088-4dbb-b106-e795ebeaec32
# su -s /bin/sh -c &quot;nova-manage db sync&quot; nova

</code></pre>
<p>验证cell0和cell1是否成功注册</p>
<pre><code># nova-manage cell_v2 list_cells

+-------+--------------------------------------+------------------------------------+-------------------------------------------------+
|  名称 |                 UUID                 |           Transport URL            |                    数据库连接                   |
+-------+--------------------------------------+------------------------------------+-------------------------------------------------+
| cell0 | 00000000-0000-0000-0000-000000000000 |               none:/               | mysql+pymysql://nova:****@controller/nova_cell0 |
| cell1 | fc354ac0-a088-4dbb-b106-e795ebeaec32 | rabbit://openstack:****@controller |    mysql+pymysql://nova:****@controller/nova    |
+-------+--------------------------------------+------------------------------------+-------------------------------------------------+

</code></pre>
<p>设置服务的开机自启动，并启动服务</p>
<pre><code># systemctl enable openstack-nova-api.service \
  openstack-nova-consoleauth.service openstack-nova-scheduler.service \
  openstack-nova-conductor.service openstack-nova-novncproxy.service
# systemctl start openstack-nova-api.service \
  openstack-nova-consoleauth.service openstack-nova-scheduler.service \
  openstack-nova-conductor.service openstack-nova-novncproxy.service

</code></pre>
<h5>5.4 （计算节点）在计算节点安装计算服务</h5>
<p>安装软件包</p>
<pre><code># yum install openstack-nova-compute -y

</code></pre>
<p>编辑/etc/nova/nova.conf文件并设置如下内容</p>
<pre><code># vi /etc/nova/nova.conf
修改：
#配置消息队列，使用 Networking 服务
[DEFAULT]
enabled_apis = osapi_compute,metadata
transport_url = rabbit://openstack:gyyf2018@controller
my_ip = 192.168.168.96
use_neutron = True
firewall_driver = nova.virt.firewall.NoopFirewallDriver
...

[api]
auth_strategy = keystone
...

#配置认证服务访问
[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = nova
password = gyyf2018
...

#启用并配置远程控制台访问
[vnc]
enabled = True
server_listen = 0.0.0.0
server_proxyclient_address = $my_ip
novncproxy_base_url = http://192.168.168.95:6080/vnc_auto.html
...

#配置镜像服务 API 的位置
[glance]
api_servers = http://controller:9292
...

#配置锁路径
[oslo_concurrency]
lock_path = /var/lib/nova/tmp
...

#配置缓存服务
[placement]
os_region_name = RegionOne
project_domain_name = Default
project_name = service
auth_type = password
user_domain_name = Default
auth_url = http://controller:35357/v3
username = placement
password = gyyf2018

</code></pre>
<p>检测当前计算节点是否支持硬件虚拟化</p>
<pre><code># egrep -c &#39;(vmx|svm)&#39; /proc/cpuinfo
0表示不支持虚拟化

</code></pre>
<p>编辑/etc/nova/nova.conf文件设置qemu来提供软件虚拟化</p>
<pre><code># vi /etc/nova/nova.conf
修改：
[libvirt]
virt_type = qemu
...

</code></pre>
<p>设置服务的开机自启动，并启动计算服务</p>
<pre><code># systemctl enable libvirtd.service openstack-nova-compute.service
# systemctl start libvirtd.service openstack-nova-compute.service

</code></pre>
<h5>5.5 <strong>（控制节点）向cell数据库添加计算节点</strong> </h5>
<p> 添加admin环境变量</p>
<pre><code># . admin-openrc

</code></pre>
<p>查看计算节点信息是否已经在数据库</p>
<pre><code># openstack compute service list --service nova-compute

+----+--------------+---------+------+---------+-------+----------------------------+
| ID | Binary       | Host    | Zone | Status  | State | Updated At                 |
+----+--------------+---------+------+---------+-------+----------------------------+
|  6 | nova-compute | compute | nova | enabled | up    | 2018-04-26T12:00:40.000000 |
+----+--------------+---------+------+---------+-------+----------------------------+

</code></pre>
<p>发现计算节点</p>
<pre><code># su -s /bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova

Found 2 cell mappings.
Skipping cell0 since it does not contain hosts.
Getting computes from cell &#39;cell1&#39;: fc354ac0-a088-4dbb-b106-e795ebeaec32
Checking host mapping for compute host &#39;compute&#39;: 47b0f376-fa1a-4fe8-9f2e-af1be125781a
Creating host mapping for compute host &#39;compute&#39;: 47b0f376-fa1a-4fe8-9f2e-af1be125781a
Found 1 unmapped computes in cell: fc354ac0-a088-4dbb-b106-e795ebeaec32

</code></pre>
<h5>5.6 <strong>（控制节点）验证操作</strong> </h5>
<p>添加admin环境变量</p>
<pre><code># . admin-openrc

</code></pre>
<p>列出计算服务的运行状态</p>
<pre><code># openstack compute service list

+----+------------------+------------+----------+---------+-------+----------------------------+
| ID | Binary           | Host       | Zone     | Status  | State | Updated At                 |
+----+------------------+------------+----------+---------+-------+----------------------------+
|  1 | nova-consoleauth | controller | internal | enabled | up    | 2018-04-26T12:10:00.000000 |
|  2 | nova-conductor   | controller | internal | enabled | up    | 2018-04-26T12:09:59.000000 |
|  5 | nova-scheduler   | controller | internal | enabled | up    | 2018-04-26T12:10:00.000000 |
|  6 | nova-compute     | compute    | nova     | enabled | up    | 2018-04-26T12:10:00.000000 |
+----+------------------+------------+----------+---------+-------+----------------------------+

</code></pre>
<p>列出认证服务的端口</p>
<pre><code># openstack catalog list

+-----------+-----------+-----------------------------------------+
| Name      | Type      | Endpoints                               |
+-----------+-----------+-----------------------------------------+
| nova      | compute   | RegionOne                               |
|           |           |   admin: http://controller:8774/v2.1    |
|           |           | RegionOne                               |
|           |           |   internal: http://controller:8774/v2.1 |
|           |           | RegionOne                               |
|           |           |   public: http://controller:8774/v2.1   |
|           |           |                                         |
| placement | placement | RegionOne                               |
|           |           |   admin: http://controller:8778         |
|           |           | RegionOne                               |
|           |           |   public: http://controller:8778        |
|           |           | RegionOne                               |
|           |           |   internal: http://controller:8778      |
|           |           |                                         |
| glance    | image     | RegionOne                               |
|           |           |   internal: http://controller:9292      |
|           |           | RegionOne                               |
|           |           |   admin: http://controller:9292         |
|           |           | RegionOne                               |
|           |           |   public: http://controller:9292        |
|           |           |                                         |
| keystone  | identity  | RegionOne                               |
|           |           |   public: http://controller:5000/v3/    |
|           |           | RegionOne                               |
|           |           |   admin: http://controller:35357/v3/    |
|           |           | RegionOne                               |
|           |           |   internal: http://controller:5000/v3/  |
|           |           |                                         |
+-----------+-----------+-----------------------------------------+

</code></pre>
<p>列出镜像信息，确认能访问镜像服务</p>
<pre><code># openstack image list

+--------------------------------------+--------+--------+
| ID                                   | Name   | Status |
+--------------------------------------+--------+--------+
| 0466e837-7d0c-4ebd-a2a1-194e80635d98 | cirros | active |
+--------------------------------------+--------+--------+

</code></pre>
<p>确认cells和placement api成功运行</p>
<pre><code># nova-status upgrade check

+--------------------------+
| 升级检查结果             |
+--------------------------+
| 检查: Cells v2           |
| 结果: 成功               |
| 详情: None               |
+--------------------------+
| 检查: Placement API      |
| 结果: 成功               |
| 详情: None               |
+--------------------------+
| 检查: Resource Providers |
| 结果: 成功               |
| 详情: None               |
+--------------------------+

</code></pre>
<h4>六、OpenStack网络服务安装</h4>
<h5>6.1 <strong>（控制节点）配置数据库</strong> </h5>
<p>连接数据库</p>
<pre><code># mysql -u root -pgyyf2018

</code></pre>
<p>创建数据库并配置权限</p>
<pre><code>MariaDB [(none)]&gt; CREATE DATABASE neutron;

MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON neutron.* TO &#39;neutron&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;gyyf2018&#39;;
MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON neutron.* TO &#39;neutron&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;gyyf2018&#39;;

</code></pre>
<h5>6.2 <strong>（控制节点）创建认证信息</strong> </h5>
<p>设置admin环境变量</p>
<pre><code># . admin-openrc

</code></pre>
<p>创建neutron用户</p>
<pre><code># openstack user create --domain default --password-prompt neutron

User Password:
Repeat User Password:     创建neutron用户的密码，gyyf2018
+---------------------+----------------------------------+
| Field               | Value                            |
+---------------------+----------------------------------+
| domain_id           | default                          |
| enabled             | True                             |
| id                  | 7e9b55f8c652478784749ac8fb616a4c |
| name                | neutron                          |
| options             | {}                               |
| password_expires_at | None                             |
+---------------------+----------------------------------+

</code></pre>
<p>将admin角色添加给neutron用户</p>
<pre><code># openstack role add --project service --user neutron admin

</code></pre>
<p>创建neutron服务</p>
<pre><code># openstack service create --name neutron \
  --description &quot;OpenStack Networking&quot; network

+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description | OpenStack Networking             |
| enabled     | True                             |
| id          | 43992283bd8d426a8956751c40a0de49 |
| name        | neutron                          |
| type        | network                          |
+-------------+----------------------------------+

</code></pre>
<p>将网络服务端口信息注册到认证服务</p>
<pre><code># openstack endpoint create --region RegionOne \
  network public http://controller:9696

+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | c183875c07a54aea810bbdd9e1104827 |
| interface    | public                           |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 43992283bd8d426a8956751c40a0de49 |
| service_name | neutron                          |
| service_type | network                          |
| url          | http://controller:9696           |
+--------------+----------------------------------+

# openstack endpoint create --region RegionOne \
  network internal http://controller:9696

+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 78b007a132654268a8d822f3f2b64678 |
| interface    | internal                         |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 43992283bd8d426a8956751c40a0de49 |
| service_name | neutron                          |
| service_type | network                          |
| url          | http://controller:9696           |
+--------------+----------------------------------+

# openstack endpoint create --region RegionOne \
  network admin http://controller:9696

+--------------+----------------------------------+
| Field        | Value                            |
+--------------+----------------------------------+
| enabled      | True                             |
| id           | 5f152d4b081e448b8e9e76ba002800be |
| interface    | admin                            |
| region       | RegionOne                        |
| region_id    | RegionOne                        |
| service_id   | 43992283bd8d426a8956751c40a0de49 |
| service_name | neutron                          |
| service_type | network                          |
| url          | http://controller:9696           |
+--------------+----------------------------------+

</code></pre>
<h5>6.3 <strong>（控制节点）安装软件包并配置配置文件</strong> </h5>
<p>安装软件包</p>
<pre><code># yum install openstack-neutron openstack-neutron-ml2 \
  openstack-neutron-linuxbridge ebtables -y

</code></pre>
<p>编辑/etc/neutron/neutron.conf文件并配置如下项</p>
<pre><code># vi /etc/neutron/neutron.conf
修改：
#配置数据库访问
[database]
connection = mysql+pymysql://neutron:gyyf2018@controller/neutron
...

#启用ML2插件，路由服务和重叠的IP地址,配置消息队列的连接,
[DEFAULT]
core_plugin = ml2
service_plugins = router
allow_overlapping_ips = true
transport_url = rabbit://openstack:gyyf2018@controller
auth_strategy = keystone
notify_nova_on_port_status_changes = true
notify_nova_on_port_data_changes = true
...

#配置认证服务访问
[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = neutron
password = gyyf2018
...

#配置网络服务来通知计算节点的网络拓扑变化
[nova]
auth_url = http://controller:35357
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = nova
password = gyyf2018
...

#配置锁路径
[oslo_concurrency]
lock_path = /var/lib/neutron/tmp
...

</code></pre>
<p>编辑/etc/neutron/plugins/ml2/ml2_conf.ini文件配置二层插件</p>
<pre><code># vi /etc/neutron/plugins/ml2/ml2_conf.ini
修改：
#启用flat，VLAN以及VXLAN网络,启用VXLAN私有网络,启用Linuxbridge和layer－2机制,启用端口安全扩展驱动
[ml2]
type_drivers = flat,vlan,vxlan
tenant_network_types = vxlan
mechanism_drivers = linuxbridge,l2population
extension_drivers = port_security
...

#配置公共虚拟网络为flat网络,创建flat外部网络时，使用的名称就是这里定义的
[ml2_type_flat]
flat_networks = provider
...

#为私有网络配置VXLAN网络识别的网络范围
[ml2_type_vxlan]
vni_ranges = 1:1000
...

#启用 ipset 增加安全组规则的高效性
[securitygroup]
enable_ipset = true

</code></pre>
<p>编辑/etc/neutron/plugins/ml2/linuxbridge_agent.ini文件配置linux bridge插件</p>
<pre><code># vi /etc/neutron/plugins/ml2/linuxbridge_agent.ini
修改：
#将公共虚拟网络和公共物理网络接口对应起来
[linux_bridge]
physical_interface_mappings = provider:eth0   #这个是可以上网的网卡名
...

#启用VXLAN覆盖网络，配置覆盖网络的物理网络接口的IP地址，启用layer－2 population
[vxlan]
enable_vxlan = true
local_ip = 192.168.168.95
l2_population = true
...

#启用安全组并配置 Linuxbridge iptables firewall driver
[securitygroup]
enable_security_group = true
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
...

</code></pre>
<p>确认内核支持网桥filters并作如下设置，编辑/etc/sysctl.conf增加以下内容</p>
<pre><code># vi /etc/sysctl.conf
添加：
net.bridge.bridge-nf-call-iptables=1
net.bridge.bridge-nf-call-ip6tables=1

</code></pre>
<p>载入br_netfilter模块</p>
<pre><code># modprobe br_netfilter

</code></pre>
<p>从配置文件加载内核参数</p>
<pre><code># sysctl -p

</code></pre>
<p>编辑/etc/neutron/l3_agent.ini配置三层插件</p>
<pre><code># vi /etc/neutron/l3_agent.ini
修改：
#配置Linuxbridge接口驱动和外部网络网桥
#external_network_bridge选项特意设置成缺省值，这样就可以在一个代理上允许多种外部网络
[DEFAULT]
interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
external_network_bridge =
...

</code></pre>
<p>编辑/etc/neutron/dhcp_agent.ini配置dhcp插件</p>
<pre><code># vi /etc/neutron/dhcp_agent.ini
修改：
#配置Linuxbridge驱动接口，DHCP驱动并启用隔离元数据
[DEFAULT]
interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq
enable_isolated_metadata = true
...

</code></pre>
<p>编辑/etc/neutron/metadata_agent.ini文件配置metadata插件</p>
<pre><code># vi /etc/neutron/metadata_agent.ini
修改：
#配置元数据主机以及共享密码
[DEFAULT]
nova_metadata_host = controller
metadata_proxy_shared_secret = gyyf2018
...

</code></pre>
<p>编辑文件/etc/nova/nova.conf配置计算服务使用网络服务</p>
<pre><code># vi /etc/nova/nova.conf
修改：
#配置访问参数，启用元数据代理并设置密码
[neutron]
url = http://controller:9696
auth_url = http://controller:35357
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = neutron
password = gyyf2018
service_metadata_proxy = true
metadata_proxy_shared_secret = gyyf2018
...

</code></pre>
<h5>6.4 （控制节点）完成安装，导入数据库表，并启动服务</h5>
<p>创建链接文件</p>
<pre><code># ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini

</code></pre>
<p>导入数据库结构</p>
<pre><code># su -s /bin/sh -c &quot;neutron-db-manage --config-file /etc/neutron/neutron.conf \
  --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot; neutron

</code></pre>
<p>重启计算服务</p>
<pre><code># systemctl restart openstack-nova-api.service

</code></pre>
<p>设置网络服务的开机自启动，并启动网络服务</p>
<pre><code># systemctl enable neutron-server.service \
  neutron-linuxbridge-agent.service neutron-dhcp-agent.service \
  neutron-metadata-agent.service
# systemctl start neutron-server.service \
  neutron-linuxbridge-agent.service neutron-dhcp-agent.service \
  neutron-metadata-agent.service

# systemctl enable neutron-l3-agent.service
# systemctl start neutron-l3-agent.service

</code></pre>
<h5>6.5 （计算节点）计算节点安装网络服务</h5>
<p>安装软件包</p>
<pre><code># yum install openstack-neutron-linuxbridge ebtables ipset -y

</code></pre>
<p>编辑/etc/neutron/neutron.conf文件完成如下项</p>
<pre><code># vi /etc/neutron/neutron.conf
修改：
#配置消息队列的连接
[DEFAULT]
transport_url = rabbit://openstack:gyyf2018@controller
auth_strategy = keystone
...

#配置认证服务访问
[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = neutron
password = gyyf2018
...

#配置锁路径
[oslo_concurrency]
lock_path = /var/lib/neutron/tmp
...

</code></pre>
<p>配置linux bridge插件，编辑/etc/neutron/plugins/ml2/linuxbridge_agent.ini完成如下项</p>
<pre><code># vi /etc/neutron/plugins/ml2/linuxbridge_agent.ini
修改：
#将公共虚拟网络和公共物理网络接口对应起来
[linux_bridge]
physical_interface_mappings = provider:eth0  #这个是可以上网的网卡名
...

#启用VXLAN覆盖网络，配置覆盖网络的物理网络接口的IP地址，启用layer－2 population
[vxlan]
enable_vxlan = true
local_ip = 192.168.168.96
l2_population = true
...

#启用安全组并配置 Linuxbridge iptables firewall driver
[securitygroup]
enable_security_group = true
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
...

</code></pre>
<p>确认内核支持网桥filters并作如下设置，编辑/etc/sysctl.conf增加以下内容</p>
<pre><code># vi /etc/sysctl.conf
添加：
net.bridge.bridge-nf-call-iptables=1
net.bridge.bridge-nf-call-ip6tables=1

</code></pre>
<p>载入br_netfilter模块</p>
<pre><code># modprobe br_netfilter

</code></pre>
<p>从配置文件加载内核参数</p>
<pre><code># sysctl -p

</code></pre>
<p>配置计算服务使用网络服务/etc/nova/nova.conf</p>
<pre><code># vi /etc/nova/nova.conf
修改：
[neutron]
url = http://controller:9696
auth_url = http://controller:35357
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = neutron
password = gyyf2018
...

</code></pre>
<p>完成安装，设置服务</p>
<pre><code># systemctl restart openstack-nova-compute.service

# systemctl enable neutron-linuxbridge-agent.service
# systemctl start neutron-linuxbridge-agent.service

</code></pre>
<h5>6.6 （控制节点）验证操作</h5>
<p>设置admin环境变量</p>
<pre><code># . admin-openrc

</code></pre>
<p>验证是否成功启动neutron-server</p>
<pre><code># openstack extension list --network

</code></pre>
<p>验证网络插件是否成功启动</p>
<pre><code># openstack network agent list

+--------------------------------------+--------------------+------------+-------------------+-------+-------+---------------------------+
| ID                                   | Agent Type         | Host       | Availability Zone | Alive | State | Binary                    |
+--------------------------------------+--------------------+------------+-------------------+-------+-------+---------------------------+
| 4859bc89-2ec8-42e3-aa4e-9bd6173aa996 | DHCP agent         | controller | nova              | :-)   | UP    | neutron-dhcp-agent        |
| 53f36185-cd1a-437f-9b48-151c641a0018 | L3 agent           | controller | nova              | :-)   | UP    | neutron-l3-agent          |
| 68145ddd-7af4-4617-9dd4-026650a3b962 | Metadata agent     | controller | None              | :-)   | UP    | neutron-metadata-agent    |
| 8814a062-43e8-41a8-9fb7-0b07e6160dbf | Linux bridge agent | controller | None              | :-)   | UP    | neutron-linuxbridge-agent |
| fbe37150-a54b-40cb-91e6-30552a3dbcf2 | Linux bridge agent | compute    | None              | :-)   | UP    | neutron-linuxbridge-agent |
+--------------------------------------+--------------------+------------+-------------------+-------+-------+---------------------------+

</code></pre>
<h4>七、OpenStack界面安装</h4>
<h5>7.1 （控制节点）安装软件包并配置相关文件</h5>
<p>安装软件包</p>
<pre><code># yum install openstack-dashboard -y

</code></pre>
<p>编辑/etc/openstack-dashboard/local_settings文件完成如下配置</p>
<pre><code># vi /etc/openstack-dashboard/local_settings
修改：
...
OPENSTACK_HOST = &quot;controller&quot;   #配置界面在控制节点使用
...
ALLOWED_HOSTS = [&#39;*&#39;]           #允许所有主机访问
...
SESSION_ENGINE = &#39;django.contrib.sessions.backends.cache&#39;   #配置memcached存储服务
...
CACHES = {
  &#39;default&#39;: {
	&#39;BACKEND&#39;: &#39;django.core.cache.backends.memcached.MemcachedCache&#39;,
	&#39;LOCATION&#39;: &#39;controller:11211&#39;,
  },
}
...
OPENSTACK_KEYSTONE_URL = &quot;http://%s:5000/v3&quot; % OPENSTACK_HOST  #启动v3的认证api
...
OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True  #启用domain支持
...
OPENSTACK_API_VERSIONS = {     #配置api版本
    &quot;identity&quot;: 3,
    &quot;image&quot;: 2,
    &quot;volume&quot;: 2,
}
...
OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = &#39;Default&#39;  #配置default为默认域
...
OPENSTACK_KEYSTONE_DEFAULT_ROLE = &quot;user&quot;       #配置user角色为默认角色
...
TIME_ZONE = &quot;Asia/Shanghai&quot;   #设置时区

</code></pre>
<p>重启httpd和memcached服务</p>
<pre><code># systemctl restart httpd.service memcached.service

</code></pre>
<h5>7.2 验证操作</h5>
<pre><code>在浏览器输入http://192.168.168.95/dashboard
Domain：default
用户名和密码：
admin gyyf2018
demo  gyyf2018
</code></pre>
<p><img src='file://C:/Users/liufei/AppData/Roaming/Typora/typora-user-images/1540870745559.png' alt='1540870745559' referrerPolicy='no-referrer' /></p>
<p><img src='file://C:/Users/liufei/AppData/Roaming/Typora/typora-user-images/1540870769418.png' alt='1540870769418' referrerPolicy='no-referrer' /></p>
<p>&nbsp;</p>
<h4>八、常见错误</h4>
<h5>8.1 打开浏览器500错误</h5>
<pre><code># vi /etc/httpd/conf.d/openstack-dashboard.conf 
添加：
WSGIApplicationGroup %{GLOBAL} 

</code></pre>
<h5>8.2 Missing value auth-url required for auth plugin password</h5>
<pre><code>在admin-openrc文件的地方执行
# source admin-openrc
</code></pre>
    ]]></content>
    <summary type="html">
    
      &lt;h2 id=&quot;准备工具&quot;&gt;&lt;a href=&quot;#准备工具&quot; class=&quot;headerlink&quot; title=&quot;准备工具&quot;&gt;&lt;/a&gt;准备工具&lt;/h2&gt;&lt;p&gt;1.Git&lt;br&gt;Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。&lt;br&gt;官网下载地
    
    </summary>
    
      <category term="配置" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Hexo" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/Hexo/"/>
   </entry>
  <entry>
    <title>搭建个人博客</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/09/21/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/09/21/搭建个人博客/</id>
    <published>2017-09-21T13:10:00.000Z</published>
    <updated>2017-09-22T06:22:48.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>1.Git<br>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。<br>官网下载地址<a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a><br>2.Node.js<br>Node.js是一种javascript的运行环境，能够使得javascript脱离浏览器运行。<br>官网下载地址<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a><br>3.Github<br>github是一个基于git的web 协作社区，它有多种机制让大家协同的和你一起的对项目进行贡献。<br>github全平台、全设备支持，你可以在任何终端上，随时随地的共享你的代码、评论或着其他有意义的信息。<br>世界上最大的开源软件社区。<br>Github官网<a href="https://github.com/">https://github.com/</a></p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>下载好Git之后一路next安装即可,安装完成后打开cmd窗口输入下面命令<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="comment">--version</span></div></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog1.png" alt=""><br>如图所示若出现版本号则安装成功</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node安装更加简单，还是一路”Next”,最后等待安装完成即可.然后输入<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span> <span class="title">-v</span></div><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog2.png" alt=""><br>安装成功则结果如图所示<br>Github仓库</p>
<h2 id="仓库准备"><a href="#仓库准备" class="headerlink" title="仓库准备"></a>仓库准备</h2><p>首先进入Github官网注册Github账号<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog3.png" alt=""><br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog4.png" alt="">                                                                        </p>
<p>注册成功后,点击New repository新建一个仓库,在Repository name一栏输入yourname.github.io<br>这就是你的博客的域名.注意yourname必须与你注册的用户名一致,比如我的用户名为lstop,对应的仓库名为lstop.github.io<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog5.png" alt=""></p>
<p>然后进入仓库,会看到右上角有个Settings,点击打开这个库的setting页面，向下拖动，直到看见GitHub Pages,点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面.配置完成后,yourname.github.io这个网址就可以正常访问了.<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog61.jpg" alt=""><br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog62.jpg" alt=""></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>hexo是基于node.js的静态博客，官网也是搭建在GitHub上的.<br>首先在电脑上某个位置新建一个Blog的文件夹,然后鼠标右键会有一个Git Bash Here,点击打开,如下图所示<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog71.png" alt=""><br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog72.png" alt=""><br>然后在命令行输入<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-cli -g</div><div class="line">npm <span class="keyword">install</span> hexo <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>等待Hexo安装完成<br>输入<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo -v</span></div></pre></td></tr></table></figure></p>
<p>查看是否安装成功<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog8.png" alt=""></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>执行命令<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init</div><div class="line">npm <span class="keyword">install</span></div></pre></td></tr></table></figure></p>
<h2 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo g</span></div></pre></td></tr></table></figure>
<h2 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo s</span></div></pre></td></tr></table></figure>
<p>在看到下图提示之后,打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog9.png" alt=""><br>大概就是这个样子<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/image/Blog10.jpg" alt=""></p>
<h2 id="部署到Gitub"><a href="#部署到Gitub" class="headerlink" title="部署到Gitub"></a>部署到Gitub</h2><p>首先要设置Git的username和email<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"yourname"</span></div><div class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"youremail"</span></div></pre></td></tr></table></figure></p>
<p>然后这里需要配置SSH Keys,如果不配置那么以后每次提交都要手动输入账号密码</p>
<p>配置完成后打开Blog目录下的_config.yml文件,打开找到Deployment,将其替换为下面一段话<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:yourname/yourname.github.io.git,master  </div><div class="line">  <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure></p>
<p>然后再执行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></div><div class="line">hexo d</div></pre></td></tr></table></figure></p>
<p>就基本上完成部署了,然后在浏览器输入<a href="https://yourname.github.io/就可以访问了" target="_blank" rel="external">https://yourname.github.io/就可以访问了</a></p>
<h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>在Blog\source_posts目录下新建.md文件,写好后执行命令<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo d -g</span></div></pre></td></tr></table></figure></p>
<p>就可以发布到博客上</p>
<h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>现在Github上有好多主题可以直接使用,上面有很详细的配置教程<br><a href="https://hexo.io/themes/" target="_blank" rel="external">链接https://hexo.io/themes/</a></p>
<p><a href="https://lstop.github.io/2017/09/21/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" title="https://lstop.github.io/2017/09/21/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">原文地址</a> </p>
<p>转载请注明出处</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工具&quot;&gt;&lt;a href=&quot;#准备工具&quot; class=&quot;headerlink&quot; title=&quot;准备工具&quot;&gt;&lt;/a&gt;准备工具&lt;/h2&gt;&lt;p&gt;1.Git&lt;br&gt;Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。&lt;br&gt;官网下载地
    
    </summary>
    
      <category term="配置" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Hexo" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat配置</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/09/08/Tomcat%E9%85%8D%E7%BD%AE/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/09/08/Tomcat配置/</id>
    <published>2017-09-08T06:25:00.000Z</published>
    <updated>2017-09-09T09:38:25.170Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。<br><a id="more"></a> </p>
<h2 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h2><p>安装jdk<br>配置环境变量</p>
<h2 id="下载Tomcat"><a href="#下载Tomcat" class="headerlink" title="下载Tomcat"></a>下载Tomcat</h2><p>在tomcat官网就可以下载相应版本的tomcat<br>window版本下载地址:<br>tomcat7.0: <a href="http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.81/bin/apache-tomcat-7.0.81-windows-x86.zip" target="_blank" rel="external">32位</a>  <a href="http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.81/bin/apache-tomcat-7.0.81-windows-x64.zip" target="_blank" rel="external">64位</a><br>tomcat8.0: <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.0.46/bin/apache-tomcat-8.0.46-windows-x86.zip" target="_blank" rel="external">32位</a>  <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.0.46/bin/apache-tomcat-8.0.46-windows-x64.zip" target="_blank" rel="external">64位</a><br>tomcat8.5: <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.20/bin/apache-tomcat-8.5.20-windows-x86.zip" target="_blank" rel="external">32位</a>  <a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.20/bin/apache-tomcat-8.5.20-windows-x64.zip" target="_blank" rel="external">64位</a><br>tomcat9.0: <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-9/v9.0.0.M26/bin/apache-tomcat-9.0.0.M26-windows-x86.zip" target="_blank" rel="external">32位</a>  <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-9/v9.0.0.M26/bin/apache-tomcat-9.0.0.M26-windows-x64.zip" target="_blank" rel="external">64位</a>  </p>
<h2 id="在eclipse上配置Tomcat"><a href="#在eclipse上配置Tomcat" class="headerlink" title="在eclipse上配置Tomcat"></a>在eclipse上配置Tomcat</h2><p>1.选择菜单栏中的window——preferences<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/Tomcat%E9%85%8D%E7%BD%AE/1.png" alt="1"><br>2.选择左侧的 server——runtime environment——在弹出的窗口中选择add<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/Tomcat%E9%85%8D%E7%BD%AE/2.png" alt="2"><br>3.选择你的Tomcat的版本<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/Tomcat%E9%85%8D%E7%BD%AE/3.png" alt="3"><br>4.选择tomcat的路径,完成配置<br><img src="https://raw.githubusercontent.com/lstop/lstop.github.io/master/Tomcat%E9%85%8D%E7%BD%AE/4.png" alt="4"></p>
<p><a href="https://lstop.github.io/2017/09/08/Tomcat%E9%85%8D%E7%BD%AE/" title="https://lstop.github.io/2017/09/08/Tomcat%E9%85%8D%E7%BD%AE/" target="_blank" rel="external">原文地址</a> </p>
<p>转载请注明出处</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="tomcat" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Traverse the binary tree</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/30/Traverse%20the%20binary%20tree/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/30/Traverse the binary tree/</id>
    <published>2017-08-30T14:15:00.000Z</published>
    <updated>2017-08-31T06:06:01.409Z</updated>
    
    <content type="html"><![CDATA[<p>  前几天做到不少关于二叉树的题,二叉树最基本的问题就是各种遍历,于是找时间整理了一下.<br>  遍历是对树的一种最基本的运算，所谓遍历二叉树，就是按一定的规则和顺序走遍二叉树的所有结点，使每一个结点都被访问一次，而且只被访问一次。由于二叉树是非线性结构，因此，树的遍历实质上是将二叉树的各个结点转换成为一个线性序列来表示。<br> <a id="more"></a><br> 二叉树的遍历一般有四种:</p>
<h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title=" 先序遍历"></a> 先序遍历</h2><p> 首先访问根，再先序遍历左（右）子树，最后先序遍历右（左）子树</p>
<h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title=" 中序遍历 "></a> 中序遍历 </h2><p> 首先中序遍历左（右）子树，再访问根，最后中序遍历右（左）子树</p>
<h2 id="后续遍历"><a href="#后续遍历" class="headerlink" title=" 后续遍历"></a> 后续遍历</h2><p> 首先后序遍历左（右）子树，再后序遍历右（左）子树，最后访问根</p>
<h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title=" 层序遍历"></a> 层序遍历</h2><p> 按照层次访问，通常用队列来做。访问根，访问子女，再访问子女的子女（越往后的层次越低）（两个子女的级别相同）</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title=" 实现代码"></a> 实现代码</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 先序遍历，中序遍历，后续遍历 时间复杂度为O(n)</span></div><div class="line"><span class="comment"> * 层序遍历 时间复杂度为O(logn),最坏的情况下时间复杂度为O(n^2)</span></div><div class="line"><span class="comment"> * @author Administrator</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">class</span> <span class="title">TreeNode</span>&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    TreeNode left;</div><div class="line">    TreeNode right;</div><div class="line">    TreeNode(<span class="keyword">int</span> x) &#123;<span class="keyword">this</span>.val = x;&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</div><div class="line">    <span class="comment">//先序遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">firstSearch</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</div><div class="line">        System.<span class="keyword">out</span>.print(root.val+<span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) firstSearch(root.left);</div><div class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) firstSearch(root.right);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//中序遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">middleSerach</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) middleSerach(root.left);</div><div class="line">        System.<span class="keyword">out</span>.print(root.val+<span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) middleSerach(root.right);	</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//后续遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lastSearch</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) lastSearch(root.left);</div><div class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) lastSearch(root.right);</div><div class="line">        System.<span class="keyword">out</span>.print(root.val+<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//层序遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">levalSearch</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        queue.<span class="keyword">add</span>(root);</div><div class="line">        <span class="keyword">int</span> leval = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">            <span class="keyword">int</span> n = queue.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">                TreeNode treeNode = queue.poll();</div><div class="line">                System.<span class="keyword">out</span>.print(treeNode.val+<span class="string">" "</span>);</div><div class="line">                <span class="keyword">if</span>(treeNode.left!=<span class="literal">null</span>) queue.<span class="keyword">add</span>(treeNode.left);</div><div class="line">                <span class="keyword">if</span>(treeNode.right!=<span class="literal">null</span>) queue.<span class="keyword">add</span>(treeNode.right);</div><div class="line">            &#125;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"    第"</span>+(leval++)+<span class="string">"层"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于一个二叉树<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1235384956,2951906414&amp;fm=26&amp;gp=0.jpg" alt=""><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">结果为</div><div class="line">先序遍历:1<span class="number"> 2 </span>4<span class="number"> 5 </span>3<span class="number"> 6 </span>7  </div><div class="line">中序遍历:4<span class="number"> 2 </span>5<span class="number"> 1 </span>6<span class="number"> 3 </span>7 </div><div class="line">后续遍历:4<span class="number"> 5 </span>2<span class="number"> 6 </span>7<span class="number"> 3 </span>1 </div><div class="line">层序遍历:</div><div class="line">1     第0层</div><div class="line">2<span class="number"> 3 </span>    第1层</div><div class="line">4<span class="number"> 5 </span>6<span class="number"> 7 </span>    第2层</div></pre></td></tr></table></figure></p>
<p><a href="https://lstop.github.io/2017/08/30/Traverse%20the%20binary%20tree/" title="https://lstop.github.io/2017/08/30/Traverse%20the%20binary%20tree/" target="_blank" rel="external">原文地址</a> </p>
<p>转载请注明出处</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  前几天做到不少关于二叉树的题,二叉树最基本的问题就是各种遍历,于是找时间整理了一下.&lt;br&gt;  遍历是对树的一种最基本的运算，所谓遍历二叉树，就是按一定的规则和顺序走遍二叉树的所有结点，使每一个结点都被访问一次，而且只被访问一次。由于二叉树是非线性结构，因此，树的遍历实质上是将二叉树的各个结点转换成为一个线性序列来表示。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/java/"/>
    
    
      <category term="binary tree" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>543.Diameter of Binary Tree</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/05/543.Diameter%20of%20Binary%20Tree/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/05/543.Diameter of Binary Tree/</id>
    <published>2017-08-05T04:00:00.000Z</published>
    <updated>2017-08-31T06:06:01.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.<br>给定一个二叉树，计算任意两个节点之间最长路径的长度<br><a id="more"></a><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">1</span></div><div class="line">   / \</div><div class="line">  <span class="number">2</span>   <span class="number">3</span></div><div class="line"> / \</div><div class="line"><span class="number">4</span>   <span class="number">5</span></div></pre></td></tr></table></figure></p>
<p>Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].<br>这是一个简单的动态规划的问题，通过深度遍历求最低节点所构成子树的最长路径，然后依次向上，保留路径的最大值，最终结果就是给定二叉树的最长路径。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> a binary tree node.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     TreeNode <span class="built_in">left</span>;</div><div class="line"> *     TreeNode <span class="built_in">right</span>;</div><div class="line"> *     TreeNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="built_in">int</span> maxlen = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxdep(TreeNode root) &#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</div><div class="line">            return <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = maxdep(root.<span class="built_in">left</span>);</div><div class="line">        <span class="built_in">int</span> <span class="built_in">right</span> = maxdep(root.<span class="built_in">right</span>);</div><div class="line">        maxlen = Math.max(maxlen,<span class="built_in">left</span>+<span class="built_in">right</span>);</div><div class="line">        return Math.max(<span class="built_in">left</span>,<span class="built_in">right</span>)+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> diameterOfBinaryTree(TreeNode root) &#123;</div><div class="line">        maxdep(root);</div><div class="line">        return maxlen;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Runtime: 9 ms</p>
<p><a href="https://lstop.github.io/2017/08/05/543.Diameter%20of%20Binary%20Tree/" title="https://lstop.github.io/2017/08/05/543.Diameter%20of%20Binary%20Tree/" target="_blank" rel="external">原文地址</a></p>
<p>转载请注明出处</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.&lt;br&gt;给定一个二叉树，计算任意两个节点之间最长路径的长度&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/leetcode/"/>
    
    
      <category term="binary tree" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>371.Sum of Two Integers</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/03/371.Sum%20of%20Two%20Integers/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/03/371.Sum of Two Integers/</id>
    <published>2017-08-03T07:36:00.000Z</published>
    <updated>2017-09-09T09:37:31.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.<br>不使用加减号计算两个整数的和，找到了两种方法。<br><a id="more"></a> </p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span> == b)  </div><div class="line">            <span class="keyword">return</span> a;  </div><div class="line">        <span class="keyword">int</span> cxor = a^b;  </div><div class="line">        <span class="keyword">int</span> cand = a&amp;b;  </div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="title">getSum</span><span class="params">(cxor, cand&lt;&lt;<span class="number">1</span>)</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.在二进制下,不考虑进位将a,b相加,即a^b.<br>2.只考虑进位,即a&amp;b.<br>3.将a&amp;b向前进一位.<br>4.此时a+b就可以转化为另外两个数的和,直至b为0.</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span> *c = (<span class="keyword">char</span> *)a;  </div><div class="line">        <span class="keyword">return</span> (<span class="keyword">long</span>) &amp;c[b];  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>1.首先将a转换为地址类型,指针c指向该地址.<br>2.c[b]就是相当于平时数组中的取下标为b的元素的值,就是说c[b]=c+sizeof(char*)b.<br>3.因为c是指针，所以c[b]指向的是地址内的值,用&amp;来将该地址对应的值的地址取出来.</p>
<p><a href="https://lstop.github.io/2017/08/03/371.Sum%20of%20Two%20Integers/" title="https://lstop.github.io/2017/08/03/371.Sum%20of%20Two%20Integers/" target="_blank" rel="external">原文地址</a></p>
<p>转载请注明出处</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.&lt;br&gt;不使用加减号计算两个整数的和，找到了两种方法。&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/leetcode/"/>
    
    
      <category term="Operator" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/Operator/"/>
    
  </entry>
  
</feed>
