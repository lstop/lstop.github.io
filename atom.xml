<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lstop</title>
  <subtitle>lstop的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/"/>
  <updated>2017-08-30T13:25:14.460Z</updated>
  <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/</id>
  
  <author>
    <name>lstop</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>543.Diameter of Binary Tree</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/05/543.Diameter%20of%20Binary%20Tree/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/05/543.Diameter of Binary Tree/</id>
    <published>2017-08-05T04:00:00.000Z</published>
    <updated>2017-08-30T13:25:14.460Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述<br>    Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.<br>    给定一个二叉树，计算任意两个节点之间最长路径的长度<br><a id="more"></a><br>        1<br>       / \<br>      2   3<br>     / \<br>    4   5<br>    Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].<br>这是一个简单的动态规划的问题，通过深度遍历求最低节点所构成子树的最长路径，然后依次向上，保留路径的最大值，最终结果就是给定二叉树的最长路径。<br>下面给出Java实现代码<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> a binary tree node.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     TreeNode <span class="built_in">left</span>;</div><div class="line"> *     TreeNode <span class="built_in">right</span>;</div><div class="line"> *     TreeNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="built_in">int</span> maxlen = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxdep(TreeNode root) &#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</div><div class="line">            return <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = maxdep(root.<span class="built_in">left</span>);</div><div class="line">        <span class="built_in">int</span> <span class="built_in">right</span> = maxdep(root.<span class="built_in">right</span>);</div><div class="line">        maxlen = Math.max(maxlen,<span class="built_in">left</span>+<span class="built_in">right</span>);</div><div class="line">        return Math.max(<span class="built_in">left</span>,<span class="built_in">right</span>)+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> diameterOfBinaryTree(TreeNode root) &#123;</div><div class="line">        maxdep(root);</div><div class="line">        return maxlen;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Runtime: 9 ms</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述&lt;br&gt;    Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.&lt;br&gt;    给定一个二叉树，计算任意两个节点之间最长路径的长度&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/leetcode/"/>
    
    
      <category term="binary tree" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>371.Sum of Two Integers</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/03/371.Sum%20of%20Two%20Integers/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/03/371.Sum of Two Integers/</id>
    <published>2017-08-03T07:36:00.000Z</published>
    <updated>2017-08-30T13:25:14.451Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述<br>Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.<br>不使用加减号计算两个整数的和，找到了两种方法。<br><a id="more"></a><br>方法一<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span> == b)  </div><div class="line">            <span class="keyword">return</span> a;  </div><div class="line">        <span class="keyword">int</span> cxor = a^b;  </div><div class="line">        <span class="keyword">int</span> cand = a&amp;b;  </div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="title">getSum</span><span class="params">(cxor, cand&lt;&lt;<span class="number">1</span>)</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>1.在二进制下,不考虑进位将a,b相加,即a^b.<br>2.只考虑进位,即a&amp;b.<br>3.将a&amp;b向前进一位.<br>4.此时a+b就可以转化为另外两个数的和,直至b为0.<br>方法二<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span> *c = (<span class="keyword">char</span> *)a;  </div><div class="line">        <span class="keyword">return</span> (<span class="keyword">long</span>) &amp;c[b];  </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>1.首先将a转换为地址类型,指针c指向该地址.<br>2.c[b]就是相当于平时数组中的取下标为b的元素的值,就是说c[b]=c+sizeof(char*)b.<br>3.因为c是指针，所以c[b]指向的是地址内的值,用&amp;来将该地址对应的值的地址取出来.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述&lt;br&gt;Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.&lt;br&gt;不使用加减号计算两个整数的和，找到了两种方法。&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/leetcode/"/>
    
    
      <category term="Operator" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/Operator/"/>
    
  </entry>
  
</feed>
