<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lstop</title>
  <subtitle>lstop的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/"/>
  <updated>2017-08-31T03:56:52.197Z</updated>
  <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/</id>
  
  <author>
    <name>lstop</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Traverse the binary tree</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/30/Traverse%20the%20binary%20tree/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/30/Traverse the binary tree/</id>
    <published>2017-08-30T14:15:00.000Z</published>
    <updated>2017-08-31T03:56:52.197Z</updated>
    
    <content type="html"><![CDATA[<p>  前几天做到不少关于二叉树的题,二叉树最基本的问题就是各种遍历,于是找时间整理了一下.<br>  遍历是对树的一种最基本的运算，所谓遍历二叉树，就是按一定的规则和顺序走遍二叉树的所有结点，使每一个结点都被访问一次，而且只被访问一次。由于二叉树是非线性结构，因此，树的遍历实质上是将二叉树的各个结点转换成为一个线性序列来表示。<br> <a id="more"></a><br> 二叉树的遍历一般有四种:</p>
<h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title=" 先序遍历"></a> 先序遍历</h2><p> 首先访问根，再先序遍历左（右）子树，最后先序遍历右（左）子树</p>
<h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title=" 中序遍历 "></a> 中序遍历 </h2><p> 首先中序遍历左（右）子树，再访问根，最后中序遍历右（左）子树</p>
<h2 id="后续遍历"><a href="#后续遍历" class="headerlink" title=" 后续遍历"></a> 后续遍历</h2><p> 首先后序遍历左（右）子树，再后序遍历右（左）子树，最后访问根</p>
<h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title=" 层序遍历"></a> 层序遍历</h2><p> 按照层次访问，通常用队列来做。访问根，访问子女，再访问子女的子女（越往后的层次越低）（两个子女的级别相同）</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title=" 实现代码"></a> 实现代码</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 先序遍历，中序遍历，后续遍历 时间复杂度为O(n)</span></div><div class="line"><span class="comment"> * 层序遍历 时间复杂度为O(logn),最坏的情况下时间复杂度为O(n^2)</span></div><div class="line"><span class="comment"> * @author Administrator</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">class</span> <span class="title">TreeNode</span>&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    TreeNode left;</div><div class="line">    TreeNode right;</div><div class="line">    TreeNode(<span class="keyword">int</span> x) &#123;<span class="keyword">this</span>.val = x;&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</div><div class="line">    <span class="comment">//先序遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">firstSearch</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</div><div class="line">        System.<span class="keyword">out</span>.print(root.val+<span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) firstSearch(root.left);</div><div class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) firstSearch(root.right);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//中序遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">middleSerach</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) middleSerach(root.left);</div><div class="line">        System.<span class="keyword">out</span>.print(root.val+<span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) middleSerach(root.right);	</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//后续遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lastSearch</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) lastSearch(root.left);</div><div class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) lastSearch(root.right);</div><div class="line">        System.<span class="keyword">out</span>.print(root.val+<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//层序遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">levalSearch</span>(<span class="params">TreeNode root</span>) </span>&#123;</div><div class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        queue.<span class="keyword">add</span>(root);</div><div class="line">        <span class="keyword">int</span> leval = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</div><div class="line">            <span class="keyword">int</span> n = queue.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">                TreeNode treeNode = queue.poll();</div><div class="line">                System.<span class="keyword">out</span>.print(treeNode.val+<span class="string">" "</span>);</div><div class="line">                <span class="keyword">if</span>(treeNode.left!=<span class="literal">null</span>) queue.<span class="keyword">add</span>(treeNode.left);</div><div class="line">                <span class="keyword">if</span>(treeNode.right!=<span class="literal">null</span>) queue.<span class="keyword">add</span>(treeNode.right);</div><div class="line">            &#125;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"    第"</span>+(leval++)+<span class="string">"层"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于一个二叉树<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1235384956,2951906414&amp;fm=26&amp;gp=0.jpg" alt=""><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">结果为</div><div class="line">先序遍历:1<span class="number"> 2 </span>4<span class="number"> 5 </span>3<span class="number"> 6 </span>7  </div><div class="line">中序遍历:4<span class="number"> 2 </span>5<span class="number"> 1 </span>6<span class="number"> 3 </span>7 </div><div class="line">后续遍历:4<span class="number"> 5 </span>2<span class="number"> 6 </span>7<span class="number"> 3 </span>1 </div><div class="line">层序遍历:</div><div class="line">1     第0层</div><div class="line">2<span class="number"> 3 </span>    第1层</div><div class="line">4<span class="number"> 5 </span>6<span class="number"> 7 </span>    第2层</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  前几天做到不少关于二叉树的题,二叉树最基本的问题就是各种遍历,于是找时间整理了一下.&lt;br&gt;  遍历是对树的一种最基本的运算，所谓遍历二叉树，就是按一定的规则和顺序走遍二叉树的所有结点，使每一个结点都被访问一次，而且只被访问一次。由于二叉树是非线性结构，因此，树的遍历实质上是将二叉树的各个结点转换成为一个线性序列来表示。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/java/"/>
    
    
      <category term="binary tree" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>543.Diameter of Binary Tree</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/05/543.Diameter%20of%20Binary%20Tree/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/05/543.Diameter of Binary Tree/</id>
    <published>2017-08-05T04:00:00.000Z</published>
    <updated>2017-08-31T04:06:25.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>Given a binary tree, you need to compute the length of the diameter of the tree. The 
</code></pre><p>diameter of a binary tree is the length of the longest path between any two nodes in a tree.<br>This path may or may not pass through the root.<br>    给定一个二叉树，计算任意两个节点之间最长路径的长度<br><a id="more"></a><br>     1<br>    / \<br>   2   3<br>  / \<br> 4   5<br>    Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].<br>这是一个简单的动态规划的问题，通过深度遍历求最低节点所构成子树的最长路径，然后依次向上，保留路径的最大值，最终结果就是给定二叉树的最长路径。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition <span class="keyword">for</span> a binary tree node.</div><div class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123;</div><div class="line"> *     <span class="built_in">int</span> val;</div><div class="line"> *     TreeNode <span class="built_in">left</span>;</div><div class="line"> *     TreeNode <span class="built_in">right</span>;</div><div class="line"> *     TreeNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="built_in">int</span> maxlen = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxdep(TreeNode root) &#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</div><div class="line">            return <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span> = maxdep(root.<span class="built_in">left</span>);</div><div class="line">        <span class="built_in">int</span> <span class="built_in">right</span> = maxdep(root.<span class="built_in">right</span>);</div><div class="line">        maxlen = Math.max(maxlen,<span class="built_in">left</span>+<span class="built_in">right</span>);</div><div class="line">        return Math.max(<span class="built_in">left</span>,<span class="built_in">right</span>)+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> diameterOfBinaryTree(TreeNode root) &#123;</div><div class="line">        maxdep(root);</div><div class="line">        return maxlen;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Runtime: 9 ms</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Given a binary tree, you need to compute the length of the diameter of the tree. The 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;diameter of a binary tree is the length of the longest path between any two nodes in a tree.&lt;br&gt;This path may or may not pass through the root.&lt;br&gt;    给定一个二叉树，计算任意两个节点之间最长路径的长度&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/leetcode/"/>
    
    
      <category term="binary tree" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>371.Sum of Two Integers</title>
    <link href="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/03/371.Sum%20of%20Two%20Integers/"/>
    <id>http://lstop:201408lf@github.com/lstop/lstop.github.io.git/2017/08/03/371.Sum of Two Integers/</id>
    <published>2017-08-03T07:36:00.000Z</published>
    <updated>2017-08-31T03:44:29.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.<br>不使用加减号计算两个整数的和，找到了两种方法。<br><a id="more"></a> </p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span> == b)  </div><div class="line">            <span class="keyword">return</span> a;  </div><div class="line">        <span class="keyword">int</span> cxor = a^b;  </div><div class="line">        <span class="keyword">int</span> cand = a&amp;b;  </div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="title">getSum</span><span class="params">(cxor, cand&lt;&lt;<span class="number">1</span>)</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.在二进制下,不考虑进位将a,b相加,即a^b.<br>2.只考虑进位,即a&amp;b.<br>3.将a&amp;b向前进一位.<br>4.此时a+b就可以转化为另外两个数的和,直至b为0.</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span> *c = (<span class="keyword">char</span> *)a;  </div><div class="line">        <span class="keyword">return</span> (<span class="keyword">long</span>) &amp;c[b];  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>1.首先将a转换为地址类型,指针c指向该地址.<br>2.c[b]就是相当于平时数组中的取下标为b的元素的值,就是说c[b]=c+sizeof(char*)b.<br>3.因为c是指针，所以c[b]指向的是地址内的值,用&amp;来将该地址对应的值的地址取出来.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.&lt;br&gt;不使用加减号计算两个整数的和，找到了两种方法。&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/categories/leetcode/"/>
    
    
      <category term="Operator" scheme="http://lstop:201408lf@github.com/lstop/lstop.github.io.git/tags/Operator/"/>
    
  </entry>
  
</feed>
